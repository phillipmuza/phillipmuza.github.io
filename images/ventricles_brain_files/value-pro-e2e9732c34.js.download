define(["require", "exports", "angularDependency", "compatibility/promise-polyfill"], function (require, exports, angular) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var ValueProxy = (function () {
        function ValueProxy(initialValue, valueLoader, eventKey) {
            Object.defineProperty(this, "isLoading", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            Object.defineProperty(this, "value", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "eventKey", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: null
            });
            Object.defineProperty(this, "promiseToLoadData", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: null
            });
            Object.defineProperty(this, "valueLoader", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "callbacks", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: []
            });
            this.value = initialValue;
            this.valueLoader = valueLoader;
            if (eventKey) {
                this.eventKey = "valueProxy." + eventKey;
                this.addReloadEventListener();
            }
        }
        Object.defineProperty(ValueProxy.prototype, "getValue", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                if (this.promiseToLoadData) {
                    return this.promiseToLoadData;
                }
                return this.reloadValue();
            }
        });
        ;
        Object.defineProperty(ValueProxy.prototype, "reloadValue", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                if (this.isLoading) {
                    return this.promiseToLoadData.then(function () {
                        return _this.reloadValue();
                    });
                }
                this.isLoading = true;
                var emitEvent = true;
                this.promiseToLoadData = this.handleNewValue(this.valueLoader(), emitEvent)
                    .finally(function () {
                    _this.isLoading = false;
                });
                return this.promiseToLoadData;
            }
        });
        ;
        Object.defineProperty(ValueProxy.prototype, "handleNewValue", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (promise, emitEvent) {
                var _this = this;
                return promise
                    .then(function (value) {
                    _this.clearValue();
                    angular.extend(_this.value, value);
                    _this.triggerListeners();
                    if (emitEvent) {
                        _this.emitReloadEvent();
                    }
                    return _this.value;
                });
            }
        });
        Object.defineProperty(ValueProxy.prototype, "addReloadEventListener", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                if (this.eventKey == null) {
                    return;
                }
                document.addEventListener(this.eventKey, function (event) {
                    if (_this === event.detail.origin) {
                        return;
                    }
                    var emitEvent = false;
                    _this.handleNewValue(Promise.resolve(event.detail.value), emitEvent)
                        .then(function (value) {
                        _this.isLoading = false;
                        if (_this.promiseToLoadData == null) {
                            _this.promiseToLoadData = Promise.resolve(value);
                        }
                    });
                });
            }
        });
        Object.defineProperty(ValueProxy.prototype, "emitReloadEvent", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                if (this.eventKey == null) {
                    return;
                }
                var data = {
                    origin: this,
                    value: this.value,
                };
                var newEvent = new CustomEvent(this.eventKey, { detail: data });
                document.dispatchEvent(newEvent);
            }
        });
        Object.defineProperty(ValueProxy.prototype, "triggerListeners", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                for (var _i = 0, _a = this.callbacks; _i < _a.length; _i++) {
                    var callback = _a[_i];
                    callback(this.value);
                }
            }
        });
        Object.defineProperty(ValueProxy.prototype, "addValueListener", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (callback) {
                this.callbacks.push(callback);
                if (!this.isLoading && this.promiseToLoadData != null) {
                    callback(this.value);
                }
                return this.callbacks.length - 1;
            }
        });
        Object.defineProperty(ValueProxy.prototype, "removeValueListener", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (index) {
                this.callbacks.splice(index, 1);
            }
        });
        Object.defineProperty(ValueProxy.prototype, "clearValue", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                if (this.value) {
                    if (this.value instanceof Array) {
                        this.value.length = 0;
                    }
                    else {
                        var valueObject = this.value;
                        for (var member in valueObject) {
                            if (valueObject.hasOwnProperty(member)) {
                                delete valueObject[member];
                            }
                        }
                    }
                }
            }
        });
        ;
        Object.defineProperty(ValueProxy.prototype, "isActive", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return this.promiseToLoadData != null;
            }
        });
        return ValueProxy;
    }());
    exports.default = ValueProxy;
});

//# sourceMappingURL=value-pro.js.map
