define(["require", "exports", "angularDependency", "lib/moment", "lib/toastr", "jquery", "angularDependency", "feedback/feedback.service", "lib/moment", "lib/toastr", "jquery", "logging/visible/track-visible.directive"], function (require, exports, angular, moment, toastr, $) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var module = angular.module("feedback-inline.directive", ["feedback.service", "track-visible.directive"]);
    var State;
    (function (State) {
        State["LOADING"] = "LOADING";
        State["ACCEPTING_FEEDBACK"] = "ACCEPTING_FEEDBACK";
        State["CANNOT_ACCEPT_FEEDBACK_NOW"] = "CANNOT_ACCEPT_FEEDBACK_NOW";
    })(State || (State = {}));
    var FeedbackInterviewController = (function () {
        function FeedbackInterviewController() {
        }
        return FeedbackInterviewController;
    }());
    var FeedbackInlineController = (function () {
        function FeedbackInlineController(feedbackService, $scope) {
            Object.defineProperty(this, "$scope", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "feedbackService", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "npsScore", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "userFeedback", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "isPostroll", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "minimumScoreForConfirmation", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            Object.defineProperty(this, "state", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: State.LOADING
            });
            Object.defineProperty(this, "lastFeedbackDate", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: null
            });
            Object.defineProperty(this, "nextFeedbackDate", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: null
            });
            Object.defineProperty(this, "toastrOptions", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: {
                    closeButton: false,
                    debug: false,
                    newestOnTop: false,
                    progressBar: false,
                    positionClass: "toast-top-center",
                    preventDuplicates: false,
                    onclick: null,
                    showDuration: 300,
                    hideDuration: 1000,
                    timeOut: 5000,
                    extendedTimeOut: 1000,
                    showEasing: "swing",
                    hideEasing: "linear",
                    showMethod: "fadeIn",
                    hideMethod: "fadeOut"
                }
            });
            this.feedbackService = feedbackService;
            this.$scope = $scope;
        }
        Object.defineProperty(FeedbackInlineController.prototype, "$onInit", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this.isPostroll = this.$scope.postroll === "true";
                var parsedMinScoreForConfirmation = parseInt(this.$scope.minimumScoreForConfirmation);
                if (!isNaN(parsedMinScoreForConfirmation)) {
                    this.minimumScoreForConfirmation = parsedMinScoreForConfirmation;
                }
                var dataElement = document.querySelector("#feedbackData");
                if (dataElement) {
                    var lastFeedbackDateStr = dataElement.getAttribute("data-lastFeedbackDate");
                    if (lastFeedbackDateStr) {
                        this.lastFeedbackDate = moment(parseInt(lastFeedbackDateStr));
                    }
                    var canProvideFeedbackStr = dataElement.getAttribute("data-canProvideFeedback");
                    var nextFeedbackDateStr = dataElement.getAttribute("data-nextFeedbackDate");
                    if (nextFeedbackDateStr) {
                        this.nextFeedbackDate = moment(parseInt(nextFeedbackDateStr));
                    }
                    if (canProvideFeedbackStr.toLowerCase() === 'true') {
                        this.state = State.ACCEPTING_FEEDBACK;
                    }
                    else if (this.isPostroll) {
                        FeedbackInlineController.transitionToNextPostroll();
                        this.state = State.CANNOT_ACCEPT_FEEDBACK_NOW;
                    }
                    else {
                        this.state = State.CANNOT_ACCEPT_FEEDBACK_NOW;
                    }
                }
                if (this.isPostroll) {
                    var autoplayIsOn = localStorage.getItem("autoplay") === "true";
                    var feedbackElement = document.querySelector(".post-roll--feedback");
                    if (autoplayIsOn) {
                        FeedbackInlineController.transitionToNextPostroll();
                    }
                    $(feedbackElement).on("autoplay", function () {
                        FeedbackInlineController.transitionToNextPostroll();
                    });
                }
            }
        });
        Object.defineProperty(FeedbackInlineController.prototype, "submitFeedback", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                var feedback = this.createFeedbackEvent();
                if (typeof this.npsScore === 'undefined') {
                    toastr.error("Please select a rating value before submitting", "Rating value missing: ", this.toastrOptions);
                }
                else {
                    this.feedbackService.submitFeedback(feedback)
                        .then(function () {
                        var didInterview = false;
                        var interviewRecruitingElement = $('interview-recruiting');
                        if (interviewRecruitingElement.length) {
                            _this.$scope.isPromoter = _this.npsScore >= 9;
                            $('.feedback-content').collapse('hide');
                            interviewRecruitingElement.collapse('show');
                            didInterview = true;
                        }
                        if (!didInterview) {
                            if (_this.npsScore && _this.npsScore >= _this.minimumScoreForConfirmation) {
                                _this.state = State.CANNOT_ACCEPT_FEEDBACK_NOW;
                            }
                            else if (_this.isPostroll) {
                                _this.transitionToNextPostroll();
                            }
                        }
                        _this.lastFeedbackDate = moment();
                        _this.nextFeedbackDate = moment();
                        return;
                    })
                        .catch(function () {
                        if (_this.isPostroll) {
                            FeedbackInlineController.transitionToNextPostroll();
                        }
                        toastr.error("We had a problem processing your feedback, please try again later.", "We're sorry!", _this.toastrOptions);
                        return;
                    });
                }
            }
        });
        Object.defineProperty(FeedbackInlineController.prototype, "dismissFeedback", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this.feedbackService.dismissFeedback().then(function () {
                    FeedbackInlineController.transitionToNextPostroll();
                });
            }
        });
        Object.defineProperty(FeedbackInlineController.prototype, "setScore", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (score) {
                this.npsScore = score;
            }
        });
        Object.defineProperty(FeedbackInlineController.prototype, "transitionToNextPostroll", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                FeedbackInlineController.transitionToNextPostroll();
            }
        });
        Object.defineProperty(FeedbackInlineController, "transitionToNextPostroll", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var afterFeedbackClass = "post-roll--after-feedback";
                var feedbackElement = $(".post-roll--feedback");
                var normalElement = $("." + afterFeedbackClass);
                feedbackElement.remove();
                normalElement.removeClass(afterFeedbackClass);
            }
        });
        ;
        Object.defineProperty(FeedbackInlineController.prototype, "createFeedbackEvent", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var previousRequestGuid = this.lookupMetaTagContent("previousRequestGuid");
                var requestGuid = this.lookupMetaTagContent("requestGuid");
                if (previousRequestGuid) {
                    requestGuid = previousRequestGuid;
                }
                return { npsScore: this.npsScore, userFeedback: this.userFeedback, requestGuid: requestGuid };
            }
        });
        Object.defineProperty(FeedbackInlineController.prototype, "lookupMetaTagContent", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (metaTagName) {
                var metaTagElement = document.querySelector("meta[name='" + metaTagName + "']");
                var content = metaTagElement ? metaTagElement.getAttribute("content") : null;
                return content;
            }
        });
        Object.defineProperty(FeedbackInlineController, "$inject", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: ['FeedbackService', '$scope']
        });
        return FeedbackInlineController;
    }());
    module.controller("FeedbackInterviewController", FeedbackInterviewController);
    module.directive("feedbackInline", function () {
        return {
            restrict: "E",
            templateUrl: "/templates/feedback/feedback.tpl",
            scope: {
                postroll: "@?",
                minimumScoreForConfirmation: "@?",
                isPromoter: "="
            },
            controller: FeedbackInlineController,
            controllerAs: "feedbackCtrl"
        };
    });
});

//# sourceMappingURL=feedback-inline.directive.js.map
