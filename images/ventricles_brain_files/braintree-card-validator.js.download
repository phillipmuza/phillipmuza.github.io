/*this is a concat version of everything in the /src folder. then edited so there were no collisions
* braintree had too many files so here we are*/
(function () {
    'use strict';
    define([], init);

    function init() {
        function addMatchingCardsToResults(cardNumber, cardConfiguration, results) {
            var i, pattern, patternLength, clonedCardConfiguration;

            for (i = 0; i < cardConfiguration.patterns.length; i++) {
                pattern = cardConfiguration.patterns[i];

                if (!matches(cardNumber, pattern)) {
                    continue;
                }

                clonedCardConfiguration = clone(cardConfiguration);

                if (Array.isArray(pattern)) {
                    patternLength = String(pattern[0]).length;
                } else {
                    patternLength = String(pattern).length;
                }

                if (cardNumber.length >= patternLength) {
                    clonedCardConfiguration.matchStrength = patternLength;
                }

                results.push(clonedCardConfiguration);
                break;
            }
        }

        function verification(card, isPotentiallyValid, isValid) {
            return {card: card, isPotentiallyValid: isPotentiallyValid, isValid: isValid};
        }

        function cardNumber(value, options) {
            var potentialTypes, cardType, isPotentiallyValid, isValid, i, maxLength;

            options = options || {};

            if (typeof value === 'number') {
                value = String(value);
            }

            if (typeof value !== 'string') {
                return verification(null, false, false);
            }

            value = value.replace(/\-|\s/g, '');

            if (!/^\d*$/.test(value)) {
                return verification(null, false, false);
            }

            potentialTypes = creditCardType(value);

            if (potentialTypes.length === 0) {
                return verification(null, false, false);
            } else if (potentialTypes.length !== 1) {
                return verification(null, true, false);
            }

            cardType = potentialTypes[0];

            if (options.maxLength && value.length > options.maxLength) {
                return verification(cardType, false, false);
            }

            if (cardType.type === creditCardType.types.UNIONPAY && options.luhnValidateUnionPay !== true) {
                isValid = true;
            } else {
                isValid = luhn10(value);
            }

            maxLength = Math.max.apply(null, cardType.lengths);
            if (options.maxLength) {
                maxLength = Math.min(options.maxLength, maxLength);
            }

            for (i = 0; i < cardType.lengths.length; i++) {
                if (cardType.lengths[i] === value.length) {
                    isPotentiallyValid = value.length < maxLength || isValid;

                    return verification(cardType, isPotentiallyValid, isValid);
                }
            }

            return verification(cardType, value.length < maxLength, false);
        }

        var cardTypes = {
            visa: {
                niceType: 'Visa',
                type: 'visa',
                patterns: [
                    4
                ],
                gaps: [4, 8, 12],
                lengths: [16, 18, 19],
                code: {
                    name: 'CVV',
                    size: 3
                }
            },
            mastercard: {
                niceType: 'Mastercard',
                type: 'mastercard',
                patterns: [
                    [51, 55],
                    [2221, 2229],
                    [223, 229],
                    [23, 26],
                    [270, 271],
                    2720
                ],
                gaps: [4, 8, 12],
                lengths: [16],
                code: {
                    name: 'CVC',
                    size: 3
                }
            },
            'american-express': {
                niceType: 'American Express',
                type: 'american-express',
                patterns: [
                    34,
                    37
                ],
                gaps: [4, 10],
                lengths: [15],
                code: {
                    name: 'CID',
                    size: 4
                }
            },
            'diners-club': {
                niceType: 'Diners Club',
                type: 'diners-club',
                patterns: [
                    [300, 305],
                    36,
                    38,
                    39
                ],
                gaps: [4, 10],
                lengths: [14, 16, 19],
                code: {
                    name: 'CVV',
                    size: 3
                }
            },
            discover: {
                niceType: 'Discover',
                type: 'discover',
                patterns: [
                    6011,
                    [644, 649],
                    65
                ],
                gaps: [4, 8, 12],
                lengths: [16, 19],
                code: {
                    name: 'CID',
                    size: 3
                }
            },
            jcb: {
                niceType: 'JCB',
                type: 'jcb',
                patterns: [
                    2131,
                    1800,
                    [3528, 3589]
                ],
                gaps: [4, 8, 12],
                lengths: [16, 17, 18, 19],
                code: {
                    name: 'CVV',
                    size: 3
                }
            },
            unionpay: {
                niceType: 'UnionPay',
                type: 'unionpay',
                patterns: [
                    620,
                    [624, 626],
                    [62100, 62182],
                    [62184, 62187],
                    [62185, 62197],
                    [62200, 62205],
                    [622010, 622999],
                    622018,
                    [622019, 622999],
                    [62207, 62209],
                    [622126, 622925],
                    [623, 626],
                    6270,
                    6272,
                    6276,
                    [627700, 627779],
                    [627781, 627799],
                    [6282, 6289],
                    6291,
                    6292
                ],
                gaps: [4, 8, 12],
                lengths: [14, 15, 16, 17, 18, 19],
                code: {
                    name: 'CVN',
                    size: 3
                }
            },
            maestro: {
                niceType: 'Maestro',
                type: 'maestro',
                patterns: [
                    493698,
                    [500000, 506698],
                    [506779, 508999],
                    [56, 59],
                    63,
                    67,
                    6
                ],
                gaps: [4, 8, 12],
                lengths: [12, 13, 14, 15, 16, 17, 18, 19],
                code: {
                    name: 'CVC',
                    size: 3
                }
            },
            elo: {
                niceType: 'Elo',
                type: 'elo',
                patterns: [
                    401178,
                    401179,
                    438935,
                    457631,
                    457632,
                    431274,
                    451416,
                    457393,
                    504175,
                    [506699, 506778],
                    [509000, 509999],
                    627780,
                    636297,
                    636368,
                    [650031, 650033],
                    [650035, 650051],
                    [650405, 650439],
                    [650485, 650538],
                    [650541, 650598],
                    [650700, 650718],
                    [650720, 650727],
                    [650901, 650978],
                    [651652, 651679],
                    [655000, 655019],
                    [655021, 655058]
                ],
                gaps: [4, 8, 12],
                lengths: [16],
                code: {
                    name: 'CVE',
                    size: 3
                }
            },
            mir: {
                niceType: 'Mir',
                type: 'mir',
                patterns: [
                    [2200, 2204]
                ],
                gaps: [4, 8, 12],
                lengths: [16, 17, 18, 19],
                code: {
                    name: 'CVP2',
                    size: 3
                }
            },
            hiper: {
                niceType: 'Hiper',
                type: 'hiper',
                patterns: [
                    637095,
                    637568,
                    637599,
                    637609,
                    637612
                ],
                gaps: [4, 8, 12],
                lengths: [16],
                code: {
                    name: 'CVC',
                    size: 3
                }
            },
            hipercard: {
                niceType: 'Hipercard',
                type: 'hipercard',
                patterns: [
                    606282
                ],
                gaps: [4, 8, 12],
                lengths: [16],
                code: {
                    name: 'CVC',
                    size: 3
                }
            }
        };

        function clone(originalObject) {
            var dupe;

            if (!originalObject) {
                return null;
            }

            dupe = JSON.parse(JSON.stringify(originalObject));

            return dupe;
        }

        var testOrder;
        var customCards = {};

        var cardNames = {
            VISA: 'visa',
            MASTERCARD: 'mastercard',
            AMERICAN_EXPRESS: 'american-express',
            DINERS_CLUB: 'diners-club',
            DISCOVER: 'discover',
            JCB: 'jcb',
            UNIONPAY: 'unionpay',
            MAESTRO: 'maestro',
            ELO: 'elo',
            MIR: 'mir',
            HIPER: 'hiper',
            HIPERCARD: 'hipercard'
        };

        var ORIGINAL_TEST_ORDER = [
            cardNames.VISA,
            cardNames.MASTERCARD,
            cardNames.AMERICAN_EXPRESS,
            cardNames.DINERS_CLUB,
            cardNames.DISCOVER,
            cardNames.JCB,
            cardNames.UNIONPAY,
            cardNames.MAESTRO,
            cardNames.ELO,
            cardNames.MIR,
            cardNames.HIPER,
            cardNames.HIPERCARD
        ];

        testOrder = clone(ORIGINAL_TEST_ORDER);

        function findType(type) {
            return customCards[type] || cardTypes[type];
        }

        function getAllCardTypes() {
            return testOrder.map(function (type) {
                return clone(findType(type));
            });
        }

        function getCardPosition(name, ignoreErrorForNotExisting) {
            var position = testOrder.indexOf(name);

            if (!ignoreErrorForNotExisting && position === -1) {
                throw new Error('"' + name + '" is not a supported card type.');
            }

            return position;
        }

        function creditCardType(cardNumber) {
            var bestMatch;
            var results = [];

            if (!isValidInputType(cardNumber)) {
                return [];
            }

            if (cardNumber.length === 0) {
                return getAllCardTypes(testOrder);
            }

            testOrder.forEach(function (type) {
                var cardConfiguration = findType(type);

                addMatchingCardsToResults(cardNumber, cardConfiguration, results);
            });

            bestMatch = findBestMatch(results);

            if (bestMatch) {
                return [bestMatch];
            }

            return results;
        }

        creditCardType.getTypeInfo = function (type) {
            return clone(findType(type));
        };

        creditCardType.removeCard = function (name) {
            var position = getCardPosition(name);

            testOrder.splice(position, 1);
        };

        creditCardType.addCard = function (config) {
            var existingCardPosition = getCardPosition(config.type, true);

            customCards[config.type] = config;

            if (existingCardPosition === -1) {
                testOrder.push(config.type);
            }
        };

        creditCardType.updateCard = function (cardType, updates) {
            var clonedCard;
            var originalObject = customCards[cardType] || cardTypes[cardType];

            if (!originalObject) {
                throw new Error('"' + cardType + '" is not a recognized type. Use `addCard` instead.');
            }

            if (updates.type && originalObject.type !== updates.type) {
                throw new Error('Cannot overwrite type parameter.');
            }

            clonedCard = clone(originalObject, true);

            Object.keys(clonedCard).forEach(function (key) {
                if (updates[key]) {
                    clonedCard[key] = updates[key];
                }
            });

            customCards[clonedCard.type] = clonedCard;
        };

        creditCardType.changeOrder = function (name, position) {
            var currentPosition = getCardPosition(name);

            testOrder.splice(currentPosition, 1);
            testOrder.splice(position, 0, name);
        };

        creditCardType.resetModifications = function () {
            testOrder = clone(ORIGINAL_TEST_ORDER);
            customCards = {};
        };

        creditCardType.types = cardNames;

        var DEFAULT_LENGTH = 3;

        function includes(array, thing) {
            var i = 0;

            for (; i < array.length; i++) {
                if (thing === array[i]) {
                    return true;
                }
            }

            return false;
        }

        function max(array) {
            var maximum = DEFAULT_LENGTH;
            var i = 0;

            for (; i < array.length; i++) {
                maximum = array[i] > maximum ? array[i] : maximum;
            }

            return maximum;
        }

        function cvvVerification(isValid, isPotentiallyValid) {
            return {isValid: isValid, isPotentiallyValid: isPotentiallyValid};
        }

        function cvv(value, maxLength) {
            maxLength = maxLength || DEFAULT_LENGTH;
            maxLength = maxLength instanceof Array ? maxLength : [maxLength];

            if (typeof value !== 'string') {
                return cvvVerification(false, false);
            }
            if (!/^\d*$/.test(value)) {
                return cvvVerification(false, false);
            }
            if (includes(maxLength, value.length)) {
                return cvvVerification(true, true);
            }
            if (value.length < Math.min.apply(null, maxLength)) {
                return cvvVerification(false, true);
            }
            if (value.length > max(maxLength)) {
                return cvvVerification(false, false);
            }

            return cvvVerification(true, true);
        }

        function expDateVerification(isValid, isPotentiallyValid, month, year) {
            return {
                isValid: isValid,
                isPotentiallyValid: isPotentiallyValid,
                month: month,
                year: year
            };
        }

        function expirationDate(value, maxElapsedYear) {
            var date, monthValid, yearValid, isValidForThisYear;

            if (typeof value === 'string') {
                value = value.replace(/^(\d\d) (\d\d(\d\d)?)$/, '$1/$2');
                date = parseDate(value);
            } else if (value !== null && typeof value === 'object') {
                date = {
                    month: String(value.month),
                    year: String(value.year)
                };
            } else {
                return expDateVerification(false, false, null, null);
            }

            monthValid = expirationMonth(date.month);
            yearValid = expirationYear(date.year, maxElapsedYear);

            if (monthValid.isValid) {
                if (yearValid.isCurrentYear) {
                    isValidForThisYear = monthValid.isValidForThisYear;

                    return expDateVerification(isValidForThisYear, isValidForThisYear, date.month, date.year);
                }

                if (yearValid.isValid) {
                    return expDateVerification(true, true, date.month, date.year);
                }
            }

            if (monthValid.isPotentiallyValid && yearValid.isPotentiallyValid) {
                return expDateVerification(false, true, null, null);
            }

            return expDateVerification(false, false, null, null);
        }

        function expMonthVerification(isValid, isPotentiallyValid, isValidForThisYear) {
            return {
                isValid: isValid,
                isPotentiallyValid: isPotentiallyValid,
                isValidForThisYear: isValidForThisYear || false
            };
        }

        function expirationMonth(value) {
            var month, result;
            var currentMonth = new Date().getMonth() + 1;

            if (typeof value !== 'string') {
                return expMonthVerification(false, false);
            }
            if (value.replace(/\s/g, '') === '' || value === '0') {
                return expMonthVerification(false, true);
            }
            if (!/^\d*$/.test(value)) {
                return expMonthVerification(false, false);
            }

            month = parseInt(value, 10);

            if (isNaN(value)) {
                return expMonthVerification(false, false);
            }

            result = month > 0 && month < 13;

            return expMonthVerification(result, result, result && month >= currentMonth);
        }

        var DEFAULT_VALID_NUMBER_OF_YEARS_IN_THE_FUTURE = 19;

        function expYearVerification(isValid, isPotentiallyValid, isCurrentYear) {
            return {
                isValid: isValid,
                isPotentiallyValid: isPotentiallyValid,
                isCurrentYear: isCurrentYear || false
            };
        }

        function expirationYear(value, maxElapsedYear) {
            var currentFirstTwo, currentYear, firstTwo, len, twoDigitYear, valid, isCurrentYear;

            maxElapsedYear = maxElapsedYear || DEFAULT_VALID_NUMBER_OF_YEARS_IN_THE_FUTURE;

            if (typeof value !== 'string') {
                return expYearVerification(false, false);
            }
            if (value.replace(/\s/g, '') === '') {
                return expYearVerification(false, true);
            }
            if (!/^\d*$/.test(value)) {
                return expYearVerification(false, false);
            }

            len = value.length;

            if (len < 2) {
                return expYearVerification(false, true);
            }

            currentYear = new Date().getFullYear();

            if (len === 3) {
                // 20x === 20x
                firstTwo = value.slice(0, 2);
                currentFirstTwo = String(currentYear).slice(0, 2);

                return expYearVerification(false, firstTwo === currentFirstTwo);
            }

            if (len > 4) {
                return expYearVerification(false, false);
            }

            value = parseInt(value, 10);
            twoDigitYear = Number(String(currentYear).substr(2, 2));

            if (len === 2) {
                isCurrentYear = twoDigitYear === value;
                valid = value >= twoDigitYear && value <= twoDigitYear + maxElapsedYear;
            } else if (len === 4) {
                isCurrentYear = currentYear === value;
                valid = value >= currentYear && value <= currentYear + maxElapsedYear;
            }

            return expYearVerification(valid, valid, isCurrentYear);
        }


        function hasEnoughResultsToDetermineBestMatch(results) {
            var numberOfResultsWithMaxStrengthProperty = results.filter(function (result) {
                return result.matchStrength;
            }).length;

            // if all possible results have a maxStrength property
            // that means the card number is sufficiently long
            // enough to determine conclusively what the type is
            return numberOfResultsWithMaxStrengthProperty > 0 &&
                numberOfResultsWithMaxStrengthProperty === results.length;
        }

        function findBestMatch(results) {
            if (!hasEnoughResultsToDetermineBestMatch(results)) {
                return;
            }

            return results.reduce(function (bestMatch, result) { // eslint-disable-line consistent-return
                if (!bestMatch) {
                    return result;
                }

                // if the current best match pattern is less specific
                // than this result, set the result as the new best match
                if (bestMatch.matchStrength < result.matchStrength) {
                    return result;
                }

                return bestMatch;
            });
        }

        function isValidInputType(cardNumber) {
            return typeof cardNumber === 'string' || cardNumber instanceof String;
        }

        /*
         * Luhn algorithm implementation in JavaScript
         * Copyright (c) 2009 Nicholas C. Zakas
         *
         * Permission is hereby granted, free of charge, to any person obtaining a copy
         * of this software and associated documentation files (the "Software"), to deal
         * in the Software without restriction, including without limitation the rights
         * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
         * copies of the Software, and to permit persons to whom the Software is
         * furnished to do so, subject to the following conditions:
         *
         * The above copyright notice and this permission notice shall be included in
         * all copies or substantial portions of the Software.
         *
         * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
         * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
         * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
         * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
         * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
         * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
         * THE SOFTWARE.
         */

        function luhn10(identifier) {
            var sum = 0;
            var alt = false;
            var i = identifier.length - 1;
            var num;

            while (i >= 0) {
                num = parseInt(identifier.charAt(i), 10);

                if (alt) {
                    num *= 2;
                    if (num > 9) {
                        num = (num % 10) + 1; // eslint-disable-line no-extra-parens
                    }
                }

                alt = !alt;

                sum += num;

                i--;
            }

            return sum % 10 === 0;
        }

// Adapted from https://github.com/polvo-labs/card-type/blob/aaab11f80fa1939bccc8f24905a06ae3cd864356/src/cardType.js#L37-L42
        function matchesRange(cardNumber, min, max) {
            var maxLengthToCheck = String(min).length;
            var substr = cardNumber.substr(0, maxLengthToCheck);
            var integerRepresentationOfCardNumber = parseInt(substr, 10);

            min = parseInt(String(min).substr(0, substr.length), 10);
            max = parseInt(String(max).substr(0, substr.length), 10);

            return integerRepresentationOfCardNumber >= min && integerRepresentationOfCardNumber <= max;
        }

        function matchesPattern(cardNumber, pattern) {
            pattern = String(pattern);

            return pattern.substring(0, cardNumber.length) === cardNumber.substring(0, pattern.length);
        }

        function matches(cardNumber, pattern) {
            if (Array.isArray(pattern)) {
                return matchesRange(cardNumber, pattern[0], pattern[1]);
            }

            return matchesPattern(cardNumber, pattern);
        }


        function getNumberOfMonthDigitsInDateString(dateString) {
            var firstCharacter = Number(dateString[0]);
            var assumedYear;

            /*
              if the first character in the string starts with `0`,
              we know that the month will be 2 digits.

              '0122' => {month: '01', year: '22'}
            */
            if (firstCharacter === 0) {
                return 2;
            }

            /*
              if the first character in the string starts with
              number greater than 1, it must be a 1 digit month

              '322' => {month: '3', year: '22'}
            */
            if (firstCharacter > 1) {
                return 1;
            }

            /*
              if the first 2 characters make up a number between
              13-19, we know that the month portion must be 1

              '139' => {month: '1', year: '39'}
            */
            if (firstCharacter === 1 && Number(dateString[1]) > 2) {
                return 1;
            }

            /*
              if the first 2 characters make up a number between
              10-12, we check if the year portion would be considered
              valid if we assumed that the month was 1. If it is
              not potentially valid, we assume the month must have
              2 digits.

              '109' => {month: '10', year: '9'}
              '120' => {month: '1', year: '20'} // when checked in the year 2019
              '120' => {month: '12', year: '0'} // when checked in the year 2021
            */
            if (firstCharacter === 1) {
                assumedYear = dateString.substr(1);

                return expirationYear(assumedYear).isPotentiallyValid ? 1 : 2;
            }

            /*
              If the length of the value is exactly 5 characters,
              we assume a full year was passed in, meaning the remaining
              single leading digit must be the month value.

              '12202' => {month: '1', year: '2202'}
            */
            if (dateString.length === 5) {
                return 1;
            }

            /*
              If the length of the value is more than five characters,
              we assume a full year was passed in addition to the month
              and therefore the month portion must be 2 digits.

              '112020' => {month: '11', year: '2020'}
            */
            if (dateString.length > 5) {
                return 2;
            }

            /*
              By default, the month value is the first value
            */
            return 1;
        }

        function parseDate(date) {
            var month, numberOfDigitsInMonth;

            if (/^\d{4}-\d{1,2}$/.test(date)) {
                date = date.split('-').reverse();
            } else if (/\//.test(date)) {
                date = date.split(/\s*\/\s*/g);
            } else if (/\s/.test(date)) {
                date = date.split(/ +/g);
            }

            if (isArray(date)) {
                return {
                    month: date[0] || '',
                    year: date.slice(1).join()
                };
            }

            numberOfDigitsInMonth = getNumberOfMonthDigitsInDateString(date);

            month = date.substr(0, numberOfDigitsInMonth);

            return {
                month: month,
                year: date.substr(month.length)
            };
        }


        var DEFAULT_MIN_POSTAL_CODE_LENGTH = 3;

        function zipVerification(isValid, isPotentiallyValid) {
            return {isValid: isValid, isPotentiallyValid: isPotentiallyValid};
        }

        function postalCode(value, options) {
            var minLength;

            options = options || {};

            minLength = options.minLength || DEFAULT_MIN_POSTAL_CODE_LENGTH;

            if (typeof value !== 'string') {
                return zipVerification(false, false);
            } else if (value.length < minLength) {
                return zipVerification(false, true);
            }

            return zipVerification(true, true);
        }


        return {
            number: cardNumber,
            expirationDate: expirationDate,
            expirationMonth: expirationMonth,
            expirationYear: expirationYear,
            cvv: cvv,
            postalCode: postalCode,
            creditCardType: creditCardType
        };
    }
})();