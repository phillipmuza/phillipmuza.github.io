"use strict";
(function () {
    var angularModules = [
        "feedback-inline.directive",
        "globalModules",
        "member-info.service",
        "reportAnErrorOverlay",
        "ui.utils",
    ];
    var injectedRequireDeps = [
        "jquery",
        "angularDependency",
        "util/remspect",
        "redesign/courseInfo",
        "redesign/courseNavigator",
        "redesign/lesson/transcript-click-handler",
        "video/remVideo",
        "eventLogging",
    ];
    var otherRequireDeps = [
        "lib/angular/ui-utils",
        "redesign/globalModules",
        "academy/lesson/belowVideoTools",
        "bootstrapJs/bootstrap-tabcollapse",
        "bootstrapJs/bootstrap-tabpaths",
        "dashboard/askexpert/ask-expert.service",
        "feedback/feedback-inline.directive",
        "lib/jquery-unveil/study.unveil",
        "lib/jquery/bootstrap/jasny",
        "lib/toastr",
        "member/info/member-info.service",
        "redesign/favoriting",
        "redesign/relatedContentTabs",
        "support/report-an-error.directive",
        "util/virtualOnClick",
    ];
    function addAngularDep(requireModule, angularModule) {
        angularModules.push(angularModule);
        otherRequireDeps.push(requireModule);
    }
    var memberDataElement = document.querySelector("#memberData");
    var isLoggedIn = false;
    if (memberDataElement) {
        var memberIdStr = memberDataElement.getAttribute("data-member-id");
        var memberId = parseInt(memberIdStr, 10);
        if (!isNaN(memberId)) {
            isLoggedIn = true;
        }
    }
    function init($, angular, remspect, CourseInfo, CourseNavigator, TranscriptClickHandler, RemVideo, eventLogging) {
        if (document.querySelector("#quizTab") != null) {
            var courseNav = document.querySelector("[data-coursenavigator]");
            courseNav.addEventListener("click", function (event) {
                if (window.location.hash == '#/LessonQuiz') {
                    if ((event.target['tagName'] === 'A' && event.target['hasAttribute']("quiz-on-lesson-url") && event.target['hasAttribute']("quiz-on-lesson-url") != "")) {
                        event.preventDefault();
                        var attr = event.target['getAttribute']("quiz-on-lesson-url");
                        window.location.href = attr;
                    }
                    else if (event.target['closest']("[quiz-on-lesson-url]") != null) {
                        var attr = event.target['closest']("[quiz-on-lesson-url]").getAttribute("quiz-on-lesson-url");
                        event.preventDefault();
                        window.location.href = attr;
                    }
                }
            }, true);
        }
        if (document.querySelector("[data-js-unlock]") != null) {
            Array.from(document.querySelectorAll("[data-js-unlock]")).map(function (el, i) {
                el.innerHTML = ''
                    + '<p>'
                    + '<span class="icon-unlock"></span> '
                    + 'To unlock this lesson you must be a Study.com Member. '
                    + '<br class="visible-xs">'
                    + '<a data-toggle="modal" href="#partialRegFormModal" data-cname="transcript_create_your_account_' + i + '" '
                    + 'test-id="transcript_create_your_account_section_' + i + '" data-track-visible '
                    + 'class="open-reg-form">Create your account</a>'
                    + '</p>';
            });
        }
        if (document.querySelector("#hasCodeExamples") !== null) {
            require(["lib/code-prettify", "lib/code-prettify-r"], function (CodePrettify) {
                $(document).ready(function () {
                    CodePrettify.prettyPrint();
                });
            });
        }
        if (document.querySelector("#hasMathEquation") !== null) {
            require(["mathjax"], function (MathJax) {
                $(document).ready(function () {
                    MathJax.startup.promise.then(function () { return MathJax.typesetPromise(["#additionalActivities"]); });
                    MathJax.startup.promise.then(function () { return MathJax.typesetPromise([document.querySelector(".wikiContent")]); });
                    MathJax.startup.promise.then(function () { return MathJax.typesetPromise([document.querySelector(".wikiDescription")]); });
                });
            });
        }
        if (document.querySelector("[data-lesson-section-body]") != null) {
            if (window.matchMedia("(max-width: 768px)").matches && $('.low-level-pillar').length > 0) {
                $("[data-lesson-section-body]").addClass("in");
                $(".lesson-wiki-sections").removeClass("collapsed");
            }
        }
        if (typeof IntersectionObserver !== "undefined") {
            var _kiq_1 = window._kiq = window._kiq || [];
            var sentinelElement = document.getElementById("transcriptBottomSentinel");
            if (sentinelElement) {
                var observer_1 = new IntersectionObserver(function (e) {
                    if (e[0].isIntersecting) {
                        _kiq_1.push(['set', { transcriptDone: true }]);
                        observer_1.disconnect();
                    }
                }, {});
                observer_1.observe(sentinelElement);
            }
        }
        function getWistiaId() {
            return $(".videoContainer").find("div[data-wistiaid]").attr("data-wistiaid");
        }
        var app = angular.module("lesson", angularModules);
        LessonController["$inject"] = ["$http", "$injector", "$scope", "$timeout", "MemberInfoService"];
        function LessonController($http, $injector, $scope, $timeout, memberInfoService) {
            var wistiaId = getWistiaId();
            var academyAssetId = $("#academyAssetId").val();
            var courseAcademyAssetId = $("#courseAcademyAssetId").val();
            this.lessonAcademyAssetId = academyAssetId;
            this.nextLessonAcademyAssetId = $("#nextLessonAcademyAssetId").val();
            this.searchResults = [];
            this.$scope = $scope;
            this.$timeout = $timeout;
            this.wistiaVideoIds = [];
            if (wistiaId) {
                require(["video/videoLessonTrackingService"], function (VideoLessonTrackingService) {
                    var videoLessonTrackingService = new VideoLessonTrackingService();
                    videoLessonTrackingService.trackVideoPlays(wistiaId, academyAssetId);
                });
            }
            if ($injector.has("TeacherVideoOverlayService")) {
                $injector.get("TeacherVideoOverlayService");
            }
            if ($injector.has("VideoCTAOverlayService")) {
                $injector.get("VideoCTAOverlayService");
            }
            initializeTranscriptTracking(memberInfoService, $http, academyAssetId, courseAcademyAssetId);
        }
        LessonController.prototype.loadVideo = function () {
            this.$timeout(function () {
                var embedElement = $('.just_in_time_wistia_embed');
                var wistiaId = embedElement.attr('data-wistiaid');
                var options = embedElement.data('wistiaoptions');
                var features = embedElement.data();
                if (RemVideo) {
                    if (this.wistiaVideoIds && this.wistiaVideoIds.indexOf(wistiaId) == -1) {
                        this.wistiaVideoIds.push(wistiaId);
                        var theVideo_1 = new RemVideo(wistiaId, options, features, this);
                        $("body").on("wistia-embed.ready", function (event, wistiaEmbedId) {
                            if (theVideo_1.wistiaVideo && wistiaEmbedId == wistiaId) {
                                theVideo_1.wistiaVideo.ready(function () {
                                    theVideo_1.play();
                                });
                            }
                            else {
                                this.$timeout(function () {
                                    if (theVideo_1.wistiaVideo && wistiaEmbedId == wistiaId) {
                                        theVideo_1.wistiaVideo.ready(function () {
                                            theVideo_1.play();
                                        });
                                    }
                                }, 500);
                            }
                        }.bind(this));
                    }
                }
                this.hasVideoBeenLoaded = true;
            }.bind(this), 10);
        };
        app.controller("LessonController", LessonController);
        new TranscriptClickHandler().initialize();
        $(document).ready(function () {
            var toggleViewHideText = $("[data-toggle-view-hide-text]");
            var toggleViewHideTarget = toggleViewHideText.attr("data-target");
            var sameTargetDifEl = $("[data-toggle-view-hide-text][data-target='" + toggleViewHideTarget + "']");
            toggleViewHideText.on("click", function () {
                sameTargetDifEl.each(function (i, el) {
                    if (el.text.indexOf("View") > -1) {
                        el.text = el.text.replace("View", "Hide");
                    }
                    else if (el.text.indexOf("Hide") > -1) {
                        el.text = el.text.replace("Hide", "View");
                    }
                });
            });
            if (document.querySelector("[data-google-member-account-was-linked]")) {
                require(['authentication/google-member-link-notifier'], function (GoogleMemberLinkNotifierModule) {
                    GoogleMemberLinkNotifierModule.GoogleMemberLinkNotifier.showNotificationIfAccountWasLinked();
                });
            }
            $(document.body).on("show.bs.offcanvas", function (e) {
                $("body").css("position", "fixed");
            });
            $(document.body).on("hidden.bs.offcanvas", function (e) {
                $("body").css("position", "relative");
            });
            if (document.getElementById("courseInfoTab")) {
                var courseInfo = new CourseInfo($('#courseInfoTab').data('coursename'));
            }
            var courseNavigator = new CourseNavigator($('[data-coursenavigator]'), !!document.querySelector("[data-no-mobile-course-nav]"));
            var lastImgAlt = $('.wikiContent .imageplugin:last img').attr('alt');
            if (lastImgAlt && lastImgAlt.toLowerCase().indexOf('infographic') >= 0) {
                $('.wikiContent .imageplugin:last').addClass('full-width-img');
            }
            $("*[data-hide-enroll]").on("click", function () {
                var academyAssetId = this.getAttribute('data-hide-enroll');
                $.ajax({
                    type: 'POST',
                    url: '/member/enrollment/unenroll.ajax',
                    data: {
                        courseId: academyAssetId
                    }
                });
                $('.doNotShow').toggleClass('hide');
            });
            var angularModules = ["lesson"];
            var scriptElement = document.querySelector("script[data-page-type]");
            var pageType = scriptElement.getAttribute("data-page-type");
            if (pageType === 'ACADEMY_ARTICLE') {
                angular.bootstrap($("body"), angularModules.concat(["prong-filter.controller"]));
            }
            else {
                angular.bootstrap($("body"), angularModules);
            }
            $('#articlesTabCollapse').tabCollapse();
            if (remspect.isControl("mfArticle")) {
                $('#articlesTabCollapse-accordion .panel-collapse').removeClass('in');
                $('#articlesTabCollapse-accordion .panel-heading a').addClass('collapsed');
            }
            $("#mini-course-progress__test-prep-carousel").carousel({
                interval: 4000,
                wrap: false,
                keyboard: false
            });
            $(".tutor-banner__close").on("click", function () {
                hideTutorBanner();
            });
            $("*[data-quiz-paywall-trigger]").click(function () {
                $("*[data-quiz-hide-on-paywall]").hide();
                $("*[data-quiz-paywall]").show();
            });
            $("*[data-toggle-passage]").click(function () {
                $("*[data-toggle-passage]").toggleClass('open');
                $("*[data-passage]").toggleClass('open');
            });
            $("[data-quiz-question-paywall-trigger]").on("click", function () {
                $(".lesson-quiz-question-cta").addClass("show-paywall");
            });
            $("[data-quiz-question-prompt-show-more]").on("click", function () {
                $(".quiz .prompt").addClass("passage-expanded");
            });
            $("[data-quiz-question-prompt-show-less]").on("click", function () {
                $(".quiz .prompt").removeClass("passage-expanded");
            });
            if (window.location.hash.indexOf("additional-reading") > -1) {
                $(".promo-module__close a").click();
            }
            var reactMobileRegBanner = $(".stickyBarManagerTestWrapper > react-init");
            if (reactMobileRegBanner.length > 0 && remspect.isVariation("stickyBarManager", "v1")) {
                require(['redesign/StickyBarManager', 'logging/visible/visibility-tester'], function (module, VisibilityTesterModule) {
                    reactMobileRegBanner.detach();
                    var mobileRegBannerCore = reactMobileRegBanner[0].querySelector(".mobile-reg-banner--sticky-bottom");
                    var stickyBarManager = module.stickyBarManager;
                    var removeStickyBar = null;
                    if (!!mobileRegBannerCore) {
                        removeStickyBar = stickyBarManager.addOneStickyBar(module.StickyBarType.REG_FORM_CTA, false, function () { return mobileRegBannerCore; });
                        var elementsToTrack = document.querySelectorAll("[data-cname='mobile_reg_banner'], [data-cname='mobile_reg_banner'] [data-cname]");
                        var visibilityTester = new VisibilityTesterModule.VisibilityTester();
                        visibilityTester.addElementsToCheck(Array.from(elementsToTrack));
                    }
                    var ctasOrClose = $("#bottom-sticky-bars .mobile-reg-banner__body__buttons > a[href='#partialRegFormModal']")
                        .add('#bottom-sticky-bars .mobile-reg-banner__header__close');
                    ctasOrClose.each(function (idx, ele) {
                        $(ele).on("click", function () {
                            removeStickyBar === null || removeStickyBar === void 0 ? void 0 : removeStickyBar();
                            if (ele.classList.contains("mobile-reg-banner__header__close")) {
                                var hoursToDismissCookie = 1;
                                var expirationDate = new Date();
                                var expirationTime = expirationDate.getTime() + (hoursToDismissCookie * 60 * 60 * 1000);
                                expirationDate.setTime(expirationTime);
                                document.cookie = "MobileRegBanner-dismiss=true; expires=".concat(expirationDate.toUTCString(), "; path=/");
                            }
                        });
                    });
                });
            }
        });
        function hideTutorBanner() {
            $(".tutor-banner").hide();
            $.cookie("hideTutorBanner", "true", { path: "/" });
        }
        function initializeTranscriptTracking(memberInfoService, $http, lessonId, courseId) {
            memberInfoService.memberInfoProxy.getValue().then(function (memberInfo) {
                if (memberInfo.isLoggedIn) {
                    require(["util/ongoing-visibility-tracker", "eventLogging"], function (OngoingVisibilityTracker, eventLogging) {
                        var transcriptTracker = new OngoingVisibilityTracker(document.querySelector("#transcriptMain"));
                        function hasActuallyReadTranscript(secondsVisibleArray) {
                            var percentOfTranscriptRead = secondsVisibleArray.filter(function (value) { return value > 7; }).length;
                            if (percentOfTranscriptRead >= 70) {
                                markAsRead(secondsVisibleArray);
                                transcriptTracker.unregisterListener(hasActuallyReadTranscript);
                            }
                        }
                        var attemptsMax = 5;
                        var attemptsLeft = attemptsMax;
                        function markAsRead(secondsVisibleArray) {
                            var config = { params: {
                                    lessonId: lessonId,
                                    courseId: courseId
                                } };
                            $http.post("/academy/lesson/mark-lesson-as-read.ajax", secondsVisibleArray, config)
                                .catch(function () {
                                attemptsLeft--;
                                if (attemptsLeft) {
                                    setTimeout(function () {
                                        markAsRead(secondsVisibleArray);
                                    }, Math.pow(2, attemptsMax - attemptsLeft) * 1000);
                                }
                            });
                        }
                        transcriptTracker.registerListener(hasActuallyReadTranscript);
                        var lastEventLoggedTimestamp = new Date(0).getTime();
                        var startWarehouseTracking = new Date().getTime();
                        function sendDataToWarehouse(secondsReadArray, element) {
                            var now = new Date().getTime();
                            var forceQuit = (now - startWarehouseTracking) >= 10 * 60 * 1000;
                            if (forceQuit) {
                                transcriptTracker.unregisterListener(sendDataToWarehouse);
                            }
                            if (forceQuit || (now - lastEventLoggedTimestamp) >= 20 * 1000) {
                                var loggableEvent = new eventLogging.LoggableEvent("transcriptRead");
                                eventLogging.addElementInfoToEventDetail(loggableEvent, element);
                                loggableEvent.secondsVisibleByPercent = secondsReadArray;
                                if (forceQuit) {
                                    loggableEvent.forceQuit = true;
                                }
                                eventLogging.queueEvent(loggableEvent);
                                lastEventLoggedTimestamp = now;
                            }
                        }
                        transcriptTracker.registerListener(sendDataToWarehouse);
                    });
                }
            });
        }
        app.directive('errSrc', function () {
            return {
                link: function (scope, element, attrs) {
                    element.bind('error', function () {
                        if (attrs.src != attrs.errSrc) {
                            attrs.$set('src', attrs.errSrc);
                        }
                    });
                }
            };
        });
        $('#hiddenVideoTools').on('hide.bs.collapse', function (e) {
            if (e.target === this) {
                e.preventDefault();
            }
        });
        $(".tocShowLink").click(function () {
            $(".longformToc").toggleClass("in");
        });
        var toggleCaretIcon = function (querySelector) {
            $(querySelector).toggleClass("icon-caret-up");
            $(querySelector).toggleClass("icon-caret-down");
        };
        var toggleViewMoreButton = function (querySelector, viewMoreText, viewLessText) {
            toggleCaretIcon(querySelector + " .icon");
            if ($(querySelector + " .icon").hasClass("icon-caret-up")) {
                $(querySelector + " .text").text(viewLessText);
            }
            else {
                $(querySelector + " .text").text(viewMoreText);
            }
        };
        $("#skills-and-practice-module-view-more-button").click(function () {
            toggleViewMoreButton("#skills-and-practice-module-view-more-button", "View more", "View less");
        });
        $("#lesson-plans-module-view-more-button").click(function () {
            toggleViewMoreButton("#lesson-plans-module-view-more-button", "View more", "View less");
        });
        $("#related-lessons-button").click(function () {
            toggleViewMoreButton("#related-lessons-button", "View more topics", "View less topics");
        });
        $("#canonical-topics-button").click(function () {
            toggleViewMoreButton("#canonical-topics-button", "View more lessons", "View less lessons");
        });
        $("#explore-topics-button").click(function () {
            toggleViewMoreButton("#explore-topics-button", "View more topics", "View less topics");
        });
        var mobileAppBannerElement = document.querySelector("app-download-banner");
        if (mobileAppBannerElement) {
            require(["mobile-promotion/AppDownloadBannerViews"], function (AppDownloadBannerViews) {
                AppDownloadBannerViews.loadAndInitializeView(mobileAppBannerElement);
            });
        }
        var inlineElement = document.querySelector("teacher-assignment-onboarding-inline-view");
        if (inlineElement != null) {
            var shareTabElement_1 = $('[data-target="#questionsTab"]');
            var lazyLoadInlineOnboardingView = function lazyLoadInlineOnboardingView() {
                require(["classroom/teacher/TeacherAssignmentOnboardingViews"], function (TeacherAssignmentOnboardingViews) {
                    var dismissCallback = function () { $("#infoTeacherAssign").collapse("hide"); };
                    TeacherAssignmentOnboardingViews.loadAndInitializeInlineView(inlineElement, dismissCallback);
                });
                shareTabElement_1.off("show.bs.tab", lazyLoadInlineOnboardingView);
            };
            var isTeacherTabActive = $("#questionsTab").hasClass("active");
            if (isTeacherTabActive) {
                lazyLoadInlineOnboardingView();
            }
            else {
                shareTabElement_1.on("show.bs.tab", lazyLoadInlineOnboardingView);
            }
        }
        var teacherTestimonialContainer = document.querySelector("study-video-react");
        if (teacherTestimonialContainer) {
            require(['redesign/lesson/StudyVideoViews'], function (studyVideoViews) {
                studyVideoViews.loadStudyVideoView(teacherTestimonialContainer);
            });
        }
        if (remspect.isAssignedToFactor("videoPinningOnDesktop") || remspect.isAssignedToFactor("videoPinningOnMobile")) {
            var videoContainer_1 = document.querySelector("#lessonTab .videoContainer, #seo-video-container .videoContainer");
            if (videoContainer_1) {
                require(["redesign/lesson/video-pinning"], function (videoPinningModule) {
                    videoPinningModule.initPinning(videoContainer_1);
                });
            }
        }
        var studyIndicatorContainerElements = document.querySelectorAll("[data-study-indicators]");
        if (studyIndicatorContainerElements) {
            require(["redesign/studyCarouselIndicators"], function (module) {
                studyIndicatorContainerElements.forEach(function (element) { return module.initStudyCarouselIndicators($, element); });
            });
        }
        return app;
    }
    require(['util/remspect'], function (remspect) {
        var scriptElement = document.querySelector("script[data-page-type]");
        var pageType = scriptElement.getAttribute("data-page-type");
        if (pageType === 'ACADEMY_ARTICLE') {
            otherRequireDeps.push("redesign/directory/prong-filter.controller");
        }
        var postRollReactContainer = document.querySelector("#post-roll-react-container");
        var feedbackDataElement = document.querySelector("#feedbackData");
        if (remspect.isVariation("feedbackInlineReact", "react") && !!postRollReactContainer) {
            require(["video/post-roll/PostRoll"], function (postRoll) {
                postRoll.loadAndInitializeView(postRollReactContainer, feedbackDataElement);
            });
        }
        if ((document.querySelector("teacher-quiz-game-start-button") != null)) {
            addAngularDep("quizGame/teacher-quiz-game.module", "teacher-quiz-game.module");
        }
        if (document.querySelector("interview-recruiting") != null) {
            addAngularDep('interview/interview-recruiting.directive', 'interview-recruiting.directive');
        }
        if (document.querySelector("assignment-creation-link") != null) {
            addAngularDep("classroom/teacher/assignments/create/assignment-creation-link.directive", "assignment-creation-link.directive");
        }
        if (document.querySelector(".freshchat-tutor-drawer") != null) {
            otherRequireDeps.push("tutor/tutor-chat-form");
            addAngularDep("redesign/lesson/instantAnswersPopUp", "instantAnswersPopUp");
        }
        else if (document.querySelector("instant-answers-pop-up") != null) {
            addAngularDep("redesign/lesson/instantAnswersPopUp", "instantAnswersPopUp");
        }
        else if (document.querySelector("#questionsTab instant-answers-module") != null) {
            addAngularDep("redesign/lesson/instantAnswersPopUp", "instantAnswersPopUp");
        }
        if (document.querySelector(".freshchat-tutor-drawer") != null) {
            otherRequireDeps.push("tutor/tutor-chat-form");
        }
        if (isLoggedIn) {
            addAngularDep("courseProgress/course-progress.controller", "course-progress.controller");
        }
        if (document.querySelector("#quizTab") != null) {
            addAngularDep("redesign/lesson/quiz/quiz", "quiz");
        }
        var practiceTestStickyBanner = document.querySelector("practice-test-sticky-banner");
        if (practiceTestStickyBanner) {
            require(["ppc/PracticeQuestionsModuleViews"], function (PracticeQuestionsModuleViews) {
                PracticeQuestionsModuleViews.loadAndInitializeStickyBannerView(practiceTestStickyBanner);
            });
        }
        require(injectedRequireDeps.concat(otherRequireDeps), init);
    });
})();

//# sourceMappingURL=lesson.js.map
