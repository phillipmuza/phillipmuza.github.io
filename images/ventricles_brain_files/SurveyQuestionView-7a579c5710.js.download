define(["require", "exports", "react", "mobx-react"], function (require, exports, React, mobx_react_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var TextInputQuestionView = (0, mobx_react_1.observer)(function (_a) {
        var store = _a.store, question = _a.question;
        return (React.createElement("div", { className: "survey-body-content" },
            React.createElement("div", { className: "prompt" }, question.prompt),
            React.createElement("div", { className: "response" },
                React.createElement("textarea", { className: "text-input-response", placeholder: "Type your answer here", onChange: function (e) { return store.updateResponseText(e.target.value); } })),
            React.createElement("div", { className: "bottom-actions" },
                store.isCurrentQuestionFirst() ? React.createElement("div", null) : (React.createElement("a", { className: "back-link", onClick: function () { return store.goToPreviousQuestion(); } },
                    React.createElement("span", { className: "icon icon-arrow-left" }),
                    " Back")),
                React.createElement("button", { className: "btn btn-primary btn-block btn-submit", disabled: !store.responseTextHolder, onClick: function () { return store.submitTextResponse(); } }, "Submit"))));
    });
    var NumberScaleQuestionView = (0, mobx_react_1.observer)(function (_a) {
        var store = _a.store, question = _a.question;
        var sliderElements = [];
        var _loop_1 = function (i) {
            sliderElements.push(React.createElement("div", { key: "number-scale-option-".concat(i), className: "number-scale-option survey-button-option", onClick: function () { return store.numberOptionSelected(i); } }, i));
        };
        for (var i = 1; i <= question.maxValue; i++) {
            _loop_1(i);
        }
        return (React.createElement("div", { className: "survey-body-content" },
            React.createElement("div", { className: "prompt" }, question.prompt),
            React.createElement("div", { className: "response" },
                React.createElement("div", { className: "number-scale" }, sliderElements),
                React.createElement("div", { className: "labels" },
                    React.createElement("div", { className: "left-label" }, question.leftLabel),
                    React.createElement("div", { className: "right-label" }, question.rightLabel))),
            React.createElement("div", { className: "bottom-actions" },
                store.isCurrentQuestionFirst() ? React.createElement("div", null) : (React.createElement("a", { className: "back-link", onClick: function () { return store.goToPreviousQuestion(); } },
                    React.createElement("span", { className: "icon icon-arrow-left" }),
                    " Back")),
                React.createElement("div", null))));
    });
    var LabeledButtonQuestionView = (0, mobx_react_1.observer)(function (_a) {
        var store = _a.store, question = _a.question;
        var buttonElements = [];
        question.buttonLabels.forEach(function (label, i) {
            buttonElements.push(React.createElement("div", { key: "labeled-button-option-".concat(i), className: "labeled-button-option survey-button-option", onClick: function () { return store.submitStringResponse(label); } }, label));
        });
        return (React.createElement("div", { className: "survey-body-content" },
            React.createElement("div", { className: "prompt" }, question.prompt),
            React.createElement("div", { className: "response" },
                React.createElement("div", { className: "labeled-buttons" }, buttonElements)),
            React.createElement("div", { className: "bottom-actions" },
                store.isCurrentQuestionFirst() ? React.createElement("div", null) : (React.createElement("a", { className: "back-link", onClick: function () { return store.goToPreviousQuestion(); } },
                    React.createElement("span", { className: "icon icon-arrow-left" }),
                    " Back")),
                React.createElement("div", null))));
    });
    var SurveyQuestionView = (0, mobx_react_1.observer)(function (_a) {
        var store = _a.store, question = _a.question;
        if (question.type === "TEXT_INPUT") {
            return React.createElement(TextInputQuestionView, { store: store, question: question });
        }
        else if (question.type === "NUMBER_SCALE_SELECT") {
            return React.createElement(NumberScaleQuestionView, { store: store, question: question });
        }
        else if (question.type === "LABELED_BUTTON_SELECT") {
            return React.createElement(LabeledButtonQuestionView, { store: store, question: question });
        }
        else {
            console.error("unexpected question type for survey question");
            return null;
        }
    });
    exports.default = SurveyQuestionView;
});

//# sourceMappingURL=SurveyQuestionView.js.map
