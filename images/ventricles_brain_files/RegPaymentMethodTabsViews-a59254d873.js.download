var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
define(["require", "exports", "card-validator", "components/GenericErrorBoundary", "lib/react-bootstrap", "logging/visible/react-track-visible", "mobx", "mobx-react", "react", "react-dom", "react-utils/react-study-helpers", "registration/ReactRegPage.app", "registration/RegSidebarViews", "registration/ReactRegAppUtil", "util/InlineSvgComponents", "util/remspect", "util/remspect-affected-event-util"], function (require, exports, card_validator_1, GenericErrorBoundary_1, react_bootstrap_1, react_track_visible_1, mobx_1, mobx_react_1, React, ReactDOM, react_study_helpers_1, ReactRegPage_app_1, RegSidebarViews_1, ReactRegAppUtil_1, InlineSvgComponents_1, remspect, RemspectAffectedEventUtil) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ExpirationDateTextInputView = exports.ExpirationDateTextInputViewClazz = exports.loadAndOpenVenmoErrorModal = exports.VenmoErrorModalView = exports.loadAndOpenWhyPaymentInfoModal = exports.WhyPaymentInfoModalView = exports.loadAndOpenParentEmailConfirmationModal = exports.ParentEmailConfirmationModalView = exports.BackButton = exports.FreeTrialDisclaimer = exports.CompactCouponCode = exports.CouponCode = exports.CouponCodeLink = exports.OtherPaymentMethodsButtonsWithVenmo = exports.MobileAltPaymentMethodsButtons = exports.PaypalTab = exports.PaypalButton = exports.RegPaymentMethodTabs = void 0;
    exports.RegPaymentMethodTabs = (0, mobx_react_1.observer)((function (_super) {
        __extends(_RegPaymentMethodTabs, _super);
        function _RegPaymentMethodTabs(props) {
            var _this = _super.call(this, props) || this;
            Object.defineProperty(_this, "mobileCart", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: window.matchMedia("(max-width: 600px)")
            });
            return _this;
        }
        Object.defineProperty(_RegPaymentMethodTabs.prototype, "componentDidMount", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this.firePaymentPageRemspectAffectedEvents();
                var _kiq = window._kiq = window._kiq || [];
                _kiq.push(['set', { 'sawCCPage': true }]);
                var app = this.props.app;
                this.mobileCart.addEventListener("change", function (event) {
                    if (event.matches) {
                        app.onClickPaymentMethod('CREDIT CARD');
                    }
                });
            }
        });
        Object.defineProperty(_RegPaymentMethodTabs.prototype, "firePaymentPageRemspectAffectedEvents", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var app = this.props.app;
                var regData = app.registrationData;
                if (regData.product === "BASIC" || regData.product === "BASIC_ANNUAL") {
                    var factor = "basic2020";
                    var eventInfo = "logged-out";
                    RemspectAffectedEventUtil.sendUniqueRemspectAffectedEventIfAssigned(factor, eventInfo);
                }
                if (regData.product === "TEACHER" || regData.product === "TEACHER_ANNUAL"
                    || regData.product === "CLASSROOM_TEACHER" || regData.product === "CLASSROOM_TEACHER_ANNUAL") {
                    var factor = "classTeacherPriceTest";
                    var eventInfo = "logged-out";
                    RemspectAffectedEventUtil.sendUniqueRemspectAffectedEventIfAssigned(factor, eventInfo);
                }
            }
        });
        Object.defineProperty(_RegPaymentMethodTabs.prototype, "render", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var app = this.props.app;
                var registrationData = app.registrationData;
                if (app.shouldShowMobileCreditCardRedesign) {
                    return React.createElement(MobileRegPaymentTabs, { app: app });
                }
                var PERSONALIZE_CART_TAB = "personalizeCartTab";
                var firstName = registrationData.billingFirstName;
                return React.createElement(React.Fragment, null,
                    React.createElement("div", { className: "lastStep hidden-xs" },
                        firstName && remspect.isVariation(PERSONALIZE_CART_TAB, "firstLastName") && React.createElement(React.Fragment, null,
                            React.createElement("h4", { "data-cname": "personalized_cart_tab", ref: (0, react_track_visible_1.trackingRef)(), "test-id": "personalized_cart_tab" },
                                React.createElement("b", { className: "word-break-break-word" },
                                    firstName,
                                    " ",
                                    registrationData.billingLastName),
                                React.createElement("br", null),
                                "Last step! To create your account, enter your payment info\u00A0below.")),
                        firstName && remspect.isVariation(PERSONALIZE_CART_TAB, "lastStepFirstName") && React.createElement(React.Fragment, null,
                            React.createElement("h4", { "data-cname": "personalized_cart_tab", ref: (0, react_track_visible_1.trackingRef)(), "test-id": "personalized_cart_tab" },
                                "Last step, ",
                                React.createElement("b", { className: "word-break-break-word" }, firstName),
                                "! To create your account, enter your payment info\u00A0below.")),
                        firstName && remspect.isVariation(PERSONALIZE_CART_TAB, "firstNameLastStep") && React.createElement(React.Fragment, null,
                            React.createElement("h4", { "data-cname": "personalized_cart_tab", ref: (0, react_track_visible_1.trackingRef)(), "test-id": "personalized_cart_tab" },
                                React.createElement("b", { className: "word-break-break-word" }, firstName),
                                ", last step! To create your account, enter your payment info\u00A0below.")),
                        !firstName || remspect.isControl(PERSONALIZE_CART_TAB) &&
                            React.createElement("h4", null, "Last step! To create your account, enter your payment info\u00A0below."),
                        React.createElement("p", null,
                            "Don't worry, ",
                            React.createElement("span", { className: "green" }, "we'll email you right away with all the details.")),
                        this.renderBulletPoints()),
                    React.createElement("p", { className: "why-info hidden-xs" },
                        "Choose your payment option below",
                        !app.paidTrialMessagingEligible && !ReactRegAppUtil_1.reactRegAppUtil.isUserScreenViewMobile() &&
                            React.createElement("a", { className: "whyPaymentInfoTrigger", onClick: function () { return loadAndOpenWhyPaymentInfoModal(); }, "test-id": "why_payment_trigger", "data-cname": "why_payment_trigger" }, "Why do I need to enter my payment info?")),
                    !app.isPaidTrialEligible && React.createElement("p", { className: "visible-xs" }, "Preferred Payment Method"),
                    app.isPaidTrialEligible && ReactRegAppUtil_1.reactRegAppUtil.isUserScreenViewMobile() && React.createElement("p", { className: "why-info visible-xs" }, "Choose your payment option below"),
                    app.isPaidTrialEligible && !ReactRegAppUtil_1.reactRegAppUtil.isUserScreenViewMobile() && React.createElement("p", { className: "visible-xs" }, "Choose your payment option below"),
                    remspect.isControl("fakeVenmo") ? (React.createElement("div", { className: "tabArea", "test-id": "payment_method_tabs" },
                        React.createElement("ul", { id: "paymentMethodTabs", className: "blockTabs hidden-phone-xl" },
                            React.createElement("li", { id: "creditCardTab", className: "tab first-child" + (!app.showPaypalButton ? " active" : ""), "data-cname": "credit_card_tab", "test-id": "credit_card_tab", onClick: function () { return app.onClickPaymentMethod('CREDIT CARD'); } },
                                React.createElement("div", null,
                                    React.createElement("span", { className: "radio-button hidden-phone" },
                                        React.createElement("span", { className: "radio-button-dot" })),
                                    "Credit Card")),
                            React.createElement("li", { id: "paypalTab", className: "tab" + (app.showPaypalButton ? " active" : ""), "data-cname": "paypal_tab", "test-id": "paypal_tab", onClick: function () { return app.onClickPaymentMethod('PAYPAL'); } },
                                React.createElement("div", null,
                                    React.createElement("span", { className: "radio-button hidden-phone" },
                                        React.createElement("span", { className: "radio-button-dot" })),
                                    React.createElement("img", { className: "payPalLogo", src: 'https://www.paypalobjects.com/webstatic/en_US/i/buttons/PP_logo_h_100x26.png', alt: "PayPal" })))),
                        React.createElement(exports.MobileAltPaymentMethodsButtons, __assign({}, this.props)),
                        app.showPaypalButton && React.createElement(exports.PaypalTab, __assign({}, this.props)))) : React.createElement(VenmoPaymentMethodTabs, { app: app }));
            }
        });
        Object.defineProperty(_RegPaymentMethodTabs.prototype, "renderBulletPoints", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var app = this.props.app;
                var registrationData = app.registrationData;
                var usePaidTrialBullets = app.isPaidTrialEligible
                    && app.paidTrialPrice
                    && !app.referred
                    && registrationData.hasSelectedPaidTrial
                    && !app.shouldPreventPaidTrial;
                var paidTrialBulletPoints = undefined;
                if (usePaidTrialBullets) {
                    var lowestPriceString = " - our lowest price!";
                    if ((0, RegSidebarViews_1.calculateIsIn2023PriceTest)(app.regMetadata.product)) {
                        lowestPriceString = "";
                    }
                    else if (!remspect.isControl("paidPass")) {
                        lowestPriceString = ". Our lowest price!";
                    }
                    var paidTrialBulletContent = React.createElement(React.Fragment, null,
                        "Try your first week for ",
                        React.createElement("span", null, app.paidTrialPrice),
                        lowestPriceString);
                    if (app.hasOptedForTeacherCertTwoWeekPlan) {
                        paidTrialBulletContent = React.createElement(React.Fragment, null,
                            "2-week membership for ",
                            React.createElement("span", null, app.paidTrialPrice),
                            lowestPriceString);
                    }
                    else if (app.hasOptedForTeacherCertFourMonthPlan) {
                        paidTrialBulletContent = React.createElement(React.Fragment, null,
                            "4-month membership for ",
                            React.createElement("span", null, app.paidTrialPrice),
                            lowestPriceString);
                    }
                    else if (!remspect.isControl("paidPass")) {
                        paidTrialBulletContent = React.createElement(React.Fragment, null,
                            "Get your one week pass for only ",
                            React.createElement("span", null, app.paidTrialPrice),
                            lowestPriceString);
                    }
                    var paidTrialPriceString = (0, react_study_helpers_1.currency)(app.product[app.coupon ? "discountPriceCents" : "remspectPriceCents"] / 100);
                    var paidTrialExplanationContent = React.createElement(React.Fragment, null,
                        "After your first week your ",
                        " " + app.product.displayName + " ",
                        " plan is billed thereafter at",
                        React.createElement("span", { "data-price": paidTrialPriceString },
                            "\u00A0",
                            paidTrialPriceString,
                            "/mo"));
                    if (app.hasOptedForTeacherCertTwoWeekPlan) {
                        paidTrialExplanationContent = React.createElement(React.Fragment, null,
                            "After your first 2 weeks your ",
                            " " + app.product.displayName + " ",
                            " plan is billed monthly at",
                            React.createElement("span", { "data-price": paidTrialPriceString },
                                "\u00A0",
                                paidTrialPriceString,
                                "/mo"));
                    }
                    else if (app.hasOptedForTeacherCertFourMonthPlan) {
                        paidTrialExplanationContent = React.createElement(React.Fragment, null,
                            "After your first 4 months your ",
                            " " + app.product.displayName + " ",
                            " plan is billed monthly at",
                            React.createElement("span", { "data-price": paidTrialPriceString },
                                "\u00A0",
                                paidTrialPriceString,
                                "/mo"));
                    }
                    paidTrialBulletPoints = React.createElement(React.Fragment, null,
                        React.createElement("li", { "test-id": "paid_trial_bullet" }, paidTrialBulletContent),
                        React.createElement("li", { className: "paid-trial-explanation" }, paidTrialExplanationContent));
                }
                var cancelBulletPoint = React.createElement("li", null,
                    "You are free to ",
                    React.createElement("b", null, "cancel online, anytime, with just a few simple clicks"));
                if (app.gsCourseTitle) {
                    cancelBulletPoint = React.createElement("li", null,
                        "Your account will be active for ",
                        React.createElement("strong", null, "12 months"));
                }
                else if (usePaidTrialBullets && app.shouldOfferTeacherCertPriceTest) {
                    cancelBulletPoint = React.createElement("li", null,
                        "You are free to ",
                        React.createElement("b", null, "cancel online, with just a few simple clicks"));
                }
                return React.createElement("ul", null,
                    paidTrialBulletPoints,
                    cancelBulletPoint,
                    React.createElement("li", null,
                        "And if you have any questions, ",
                        React.createElement("b", null, "you can reach out anytime")));
            }
        });
        return _RegPaymentMethodTabs;
    }(React.Component)));
    var MobileRegPaymentTabs = (0, mobx_react_1.observer)((function (_super) {
        __extends(MobileRegPaymentTabs, _super);
        function MobileRegPaymentTabs() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(MobileRegPaymentTabs.prototype, "render", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _a, _b;
                var app = this.props.app;
                var cardType = "unknown";
                var cardNum = (_b = (_a = app.form) === null || _a === void 0 ? void 0 : _a.values) === null || _b === void 0 ? void 0 : _b.creditCardNumber;
                var card = (0, card_validator_1.number)(cardNum).card;
                if (card) {
                    if (ReactRegPage_app_1.ReactRegPageApp.KNOWN_CARD_TYPES.indexOf(card.type) >= 0) {
                        cardType = card.type;
                    }
                }
                var alternativePayments = [];
                if (!remspect.isControl("braintree")) {
                    alternativePayments.push(React.createElement(ApplePayButton, { app: app, key: "applePayButton", btnClass: "mobile-cart-payment__payment-option ds-btn-ghost-blue", logoClass: "mobile-cart-payment__payment-option-logo" }));
                    alternativePayments.push(React.createElement(GooglePayButton, { app: app, key: "googlePayButton", btnClass: "mobile-cart-payment__payment-option ds-btn-ghost-blue", logoClass: "mobile-cart-payment__payment-option-logo" }));
                }
                alternativePayments.push(React.createElement(exports.PaypalButton, { app: app, key: "paypalButton", btnClass: "mobile-cart-payment__payment-option ds-btn-ghost-blue", logoClass: "mobile-cart-payment__payment-option-logo" }));
                return (React.createElement("div", { className: "mobile-cart-payment" },
                    React.createElement("div", { className: "mobile-cart-payment__alternative-payments" }, alternativePayments),
                    React.createElement("div", { className: "mobile-cart-payment-header-container" },
                        React.createElement("div", { className: "mobile-cart-payment-header" },
                            React.createElement("div", { className: "mobile-cart-payment-options" },
                                React.createElement("div", { className: "mobile-cart-payment__credit-card" },
                                    React.createElement("span", null, "Pay with Card"),
                                    React.createElement("span", { className: "mobile-cart-payment__cards" },
                                        React.createElement("span", { className: "cardIcons card-".concat(cardType) }))))))));
            }
        });
        return MobileRegPaymentTabs;
    }(React.Component)));
    var ApplePayButton = (0, mobx_react_1.observer)(function (_a) {
        var app = _a.app, btnClass = _a.btnClass, logoClass = _a.logoClass;
        if (!app.canUseApplePay()) {
            return null;
        }
        var regData = app.registrationData;
        var shouldDisable = !regData.billingFirstName || !regData.billingLastName || !regData.billingAddressCountry || app.form.submitting;
        if (app.isInHighIntentSinglePageCheckoutAnyVariation) {
            shouldDisable = shouldDisable
                || !regData.email
                || !regData.password
                || !regData.phoneSms
                || !app.form.getDynamicFormQuestionWithKey("email").valid
                || !app.form.getDynamicFormQuestionWithKey("password").valid
                || !app.form.getDynamicFormQuestionWithKey("phoneSms").valid;
        }
        return (React.createElement("button", { type: "button", className: btnClass, "data-apple-pay-click": "", onClick: function () { return app.ifInHighIntentSinglePageCheckoutMarkEmailAndPhoneDirty(); }, disabled: shouldDisable },
            React.createElement("img", { src: "/images/payment/apple-pay-black.png", alt: "Pay with Apple Pay", ref: (0, react_track_visible_1.trackingRef)(), "test-id": "apple_pay", "data-cname": "apple_pay", className: logoClass })));
    });
    var GooglePayButton = (0, mobx_react_1.observer)(function (_a) {
        var app = _a.app, btnClass = _a.btnClass, logoClass = _a.logoClass;
        if (app.canUseApplePay()) {
            return null;
        }
        var regData = app.registrationData;
        var shouldDisable = !regData.billingFirstName || !regData.billingLastName || !regData.billingAddressCountry || app.form.submitting;
        if (app.isInHighIntentSinglePageCheckoutAnyVariation) {
            shouldDisable = shouldDisable
                || !regData.email
                || !regData.password
                || !regData.phoneSms
                || !app.form.getDynamicFormQuestionWithKey("email").valid
                || !app.form.getDynamicFormQuestionWithKey("password").valid
                || !app.form.getDynamicFormQuestionWithKey("phoneSms").valid;
        }
        return (React.createElement("button", { type: "button", className: btnClass, onClick: function () { return app.submitRegFormWithGoogle(); }, disabled: shouldDisable },
            React.createElement("img", { src: "/images/payment/google-pay-black.png", alt: "Pay with Google Pay", ref: (0, react_track_visible_1.trackingRef)(), "test-id": "google_pay", "data-cname": "google_pay", className: logoClass })));
    });
    exports.PaypalButton = (0, mobx_react_1.observer)(function (_a) {
        var app = _a.app, btnClass = _a.btnClass, logoClass = _a.logoClass;
        var regData = app.registrationData;
        var shouldDisable = !regData.billingFirstName || !regData.billingLastName || !regData.billingAddressCountry || app.form.submitting;
        if (app.isInHighIntentSinglePageCheckoutAnyVariation) {
            shouldDisable = shouldDisable
                || !regData.email
                || !regData.password
                || !regData.phoneSms
                || !app.form.getDynamicFormQuestionWithKey("email").valid
                || !app.form.getDynamicFormQuestionWithKey("password").valid
                || !app.form.getDynamicFormQuestionWithKey("phoneSms").valid;
        }
        return (React.createElement("button", { type: "button", "data-cname": "create_account_paypal_final", "test-id": "create_account_paypal_final", className: btnClass, onClick: function () { return app.submitRegFormWithPayPal(); }, disabled: shouldDisable, "data-paypal-submit-button": "" },
            React.createElement("img", { src: "/images/payment/paypal.svg", alt: "Check out with PayPal", className: logoClass })));
    });
    exports.PaypalTab = (0, mobx_react_1.observer)(function (props) {
        var app = props.app;
        var registrationData = app.registrationData;
        return React.createElement("div", { className: "featureElementsContainer tabContent tab-content" },
            React.createElement("div", { id: "paypal" },
                !app.gsCourseTitle && React.createElement(React.Fragment, null,
                    !app.showCouponCodeInput && !app.shouldPreventCouponEdit && !app.isFamilyPlanAdminWithoutSubscription &&
                        React.createElement("div", { className: "haveCouponText" },
                            React.createElement("a", { className: "grey right", onClick: (0, mobx_1.action)(function () { return app.showCouponCodeInput = true; }), "data-cname": "have_coupon_code", "test-id": "have_coupon_code" }, "Have a Coupon Code?")),
                    app.showCouponCodeInput &&
                        React.createElement("div", { className: "haveCouponText" })),
                React.createElement("div", { className: "payPalInfo clearfix", "test-id": "paypal_info" },
                    React.createElement("div", { className: "text" },
                        React.createElement("strong", null, "You're almost there!")),
                    React.createElement("div", { className: "text" }, "Continue to PayPal to create your account."),
                    React.createElement("div", { className: "additionalInfo" }, "Once your payment is confirmed through PayPal, you'll get automatically redirected to Study.com.")),
                React.createElement(exports.CouponCode, __assign({}, props)),
                React.createElement("div", { className: "col-xs-12" },
                    React.createElement("button", { className: "payPalButton", type: 'submit', "data-cname": "create_account_paypal_final", "test-id": "create_account_paypal_final", onClick: function () { return app.submitRegFormWithPayPal(); } },
                        React.createElement("img", { "data-paypal-submit-button": true, src: "https://www.paypalobjects.com/webstatic/en_US/i/buttons/checkout-logo-large.png", alt: "Check out with PayPal", className: !registrationData.billingFirstName || !registrationData.billingLastName || !registrationData.billingAddressCountry
                                ? "disabled" : "" }))),
                app.form.submitting &&
                    React.createElement("div", { className: "process-time-text" },
                        React.createElement("div", { className: "media" },
                            React.createElement("div", { className: "media-left" },
                                React.createElement("img", { className: "spinner", src: "/images/reDesign/global/spinner-dark-teal.png", alt: "" })),
                            React.createElement("div", { className: "media-body" }, "Hooray! You're on your way to a new account. This\u00A0shouldn't take more than a minute."))),
                React.createElement("div", { className: "hidden-xs" },
                    React.createElement(exports.FreeTrialDisclaimer, null)),
                React.createElement("div", { className: "payPalBack" },
                    React.createElement(exports.BackButton, __assign({}, props)))));
    });
    exports.MobileAltPaymentMethodsButtons = (0, mobx_react_1.observer)(function (props) {
        var app = props.app;
        return React.createElement("div", { className: "alt-payments visible-phone-xl" },
            React.createElement(ApplePayButton, { app: app, btnClass: "alt-payments__alt" }),
            React.createElement(GooglePayButton, { app: app, btnClass: "alt-payments__alt" }),
            React.createElement("div", { className: "alt-payments__spacer" }),
            React.createElement(exports.PaypalButton, { app: app, btnClass: "alt-payments__alt alt-payments__alt--paypal" }));
    });
    exports.OtherPaymentMethodsButtonsWithVenmo = (0, mobx_react_1.observer)(function (props) {
        var app = props.app;
        var regData = app.registrationData;
        var isV2 = remspect.isVariation("fakeVenmo", "V2");
        var shouldDisable = !regData.billingFirstName || !regData.billingLastName || !regData.billingAddressCountry || app.form.submitting;
        return React.createElement("div", { className: "alt-payments visible-phone-xl" },
            React.createElement(ApplePayButton, { app: app, btnClass: "alt-payments__alt" }),
            React.createElement(GooglePayButton, { app: app, btnClass: "alt-payments__alt" }),
            isV2 && (React.createElement("div", { className: "alt-payments__spacer-small" })),
            isV2 && (React.createElement(exports.PaypalButton, { app: app, btnClass: "alt-payments__alt alt-payments__alt--paypal" })),
            isV2 ?
                (React.createElement("div", { className: "alt-payments__spacer-small" })) :
                (React.createElement("div", { className: "alt-payments__spacer" })),
            React.createElement("button", { type: "button", "data-cname": "create_account_venmo_final", "test-id": "create_account_venmo_final", className: "alt-payments__alt alt-payments__alt--venmo", disabled: shouldDisable, onClick: function () { return loadAndOpenVenmoErrorModal(app); } },
                React.createElement("img", { src: "/images/payment/venmo-logo-blue.png", alt: "Check out with Venmo" })));
    });
    var VenmoPaymentMethodTabs = (0, mobx_react_1.observer)(function (props) {
        var app = props.app;
        var isV2 = remspect.isVariation("fakeVenmo", "V2");
        return (React.createElement("div", { className: "tabArea", "test-id": "payment_method_tabs" },
            React.createElement("ul", { id: "venmoPaymentMethodTabs", className: "blockTabs" + (remspect.isVariation("braintree", "V3") ? " hidden-phone-xl" : "") },
                React.createElement("li", { id: "creditCardTab", className: "tab first-child" + (!app.showPaypalButton ? " active" : "") + (isV2 ? " reduced-tab" : ""), onClick: function () { return app.onClickPaymentMethod('CREDIT CARD'); }, "data-cname": "credit_card_tab", "test-id": "credit_card_tab" },
                    React.createElement("div", null,
                        React.createElement("span", { className: "radio-button hidden-phone" + (isV2 ? " dot-hidden-custom" : "") },
                            React.createElement("span", { className: "radio-button-dot" })),
                        "Credit Card")),
                isV2 && (React.createElement("li", { id: "paypalTab", className: "tab reduced-tab" + (app.showPaypalButton ? " active" : ""), onClick: function () { return app.onClickPaymentMethod('PAYPAL'); }, "data-cname": "paypal_tab", "test-id": "paypal_tab" },
                    React.createElement("div", null,
                        React.createElement("span", { className: "radio-button hidden-phone" + (isV2 ? " dot-hidden-custom" : "") },
                            React.createElement("span", { className: "radio-button-dot" })),
                        React.createElement("img", { className: "payPalLogo", src: 'https://www.paypalobjects.com/webstatic/en_US/i/buttons/PP_logo_h_100x26.png', alt: "PayPal" })))),
                React.createElement("li", { id: "venmoTab", className: "tab" + (isV2 ? " reduced-tab" : ""), onClick: function () { return loadAndOpenVenmoErrorModal(app); }, "data-cname": "venmo_tab", "test-id": "venmo_tab" },
                    React.createElement("div", null,
                        React.createElement("span", { className: "radio-button hidden-phone" + (isV2 ? " dot-hidden-custom" : "") },
                            React.createElement("span", { className: "radio-button-dot" })),
                        React.createElement("img", { className: "venmoLogo", src: '/images/payment/venmo-logo-blue.png', alt: "Venmo" })))),
            remspect.isVariation("braintree", "V3") && React.createElement(exports.OtherPaymentMethodsButtonsWithVenmo, { app: app }),
            app.showPaypalButton && React.createElement(exports.PaypalTab, { app: app })));
    });
    exports.CouponCodeLink = (0, mobx_react_1.observer)(function (props) {
        var app = props.app;
        var couponLabel = app.shouldShowMobileCreditCardRedesign ? "Coupon Code" : "Have a Coupon Code?";
        if (app.isInHighIntentSinglePageCheckoutAnyVariation) {
            couponLabel = "Add coupon";
        }
        var couponCodeClasses = ["grey", "have-coupon-code"];
        if (!app.shouldShowMobileCreditCardRedesign) {
            couponCodeClasses.push("right");
        }
        return React.createElement(React.Fragment, null, !app.showCouponCodeInput && !app.shouldPreventCouponEdit && !app.isFamilyPlanAdminWithoutSubscription && !app.gsCourseTitle &&
            React.createElement("span", { className: "small coupon-code-link" },
                React.createElement("a", { className: couponCodeClasses.join(" "), onClick: (0, mobx_1.action)(function () { return app.showCouponCodeInput = !app.showCouponCodeInput; }), "data-cname": "have_coupon_code", "test-id": "have_coupon_code" }, couponLabel)));
    });
    exports.CouponCode = (0, mobx_react_1.observer)((function (_super) {
        __extends(_CouponCode, _super);
        function _CouponCode(props) {
            var _this = _super.call(this, props) || this;
            Object.defineProperty(_this, "inputRef", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            _this.inputRef = React.createRef();
            return _this;
        }
        Object.defineProperty(_CouponCode.prototype, "componentDidMount", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                setTimeout(function () {
                    var _a;
                    (_a = _this.inputRef.current) === null || _a === void 0 ? void 0 : _a.focus();
                }, 100);
            }
        });
        Object.defineProperty(_CouponCode.prototype, "render", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                var _a;
                var app = this.props.app;
                var topDivClassName = "form-group coupon-group";
                if ((app.validCoupon != null && !app.validCoupon) || !!app.couponValidationError) {
                    topDivClassName += " has-error";
                }
                if (app.validCoupon) {
                    topDivClassName += " has-success";
                }
                if (app.validCoupon === null && !!app.regMetadata.couponCode) {
                    topDivClassName += " is-incomplete";
                }
                var onInputChange = (0, mobx_1.action)(function () {
                    app.regMetadata.couponCode = _this.inputRef.current.value;
                    app.couponValidationError = '';
                    app.validCoupon = null;
                    if (!app.isInHighIntentSinglePageCheckoutAnyVariation) {
                        app.coupon = null;
                    }
                });
                var onSubmit = (0, mobx_1.action)(function () {
                    if (app.isInHighIntentSinglePageCheckoutAnyVariation) {
                        app.coupon = null;
                    }
                });
                var onApply = (0, mobx_1.action)(function () {
                    if (app.isInHighIntentSinglePageCheckoutAnyVariation && app.coupon) {
                        app.regMetadata.couponCode = '';
                        app.couponValidationError = '';
                        app.validCoupon = null;
                    }
                });
                if (app.regMetadata.couponCode != null && app.regMetadata.couponCode !== "") {
                    topDivClassName += " dynamic-form__question--not-empty";
                }
                var feedback = React.createElement(React.Fragment, null,
                    app.validCoupon && (!app.paidTrialPrice || app.referred) &&
                        React.createElement("div", { className: "feedbackText successText", "test-id": "reg_form_coupon_code_success" }, "Coupon Code Successful"),
                    !!app.couponValidationError &&
                        React.createElement("div", { className: "feedbackText errorText", "test-id": "reg_form_coupon_code_failed", ref: (0, react_track_visible_1.trackingRef)() },
                            app.isInHighIntentSinglePageCheckoutAnyVariation && React.createElement(InlineSvgComponents_1.InlineSvg, { src: "/images/icons/material/icon-warning-circle-outline-20.svg" }),
                            app.couponValidationError),
                    app.validCoupon === null && !!app.regMetadata.couponCode &&
                        React.createElement("div", { className: "feedbackText errorText", "test-id": "reg_form_coupon_code_not_applied" }, "You have not applied your coupon"));
                var getApplyCouponButtonLabel = function () {
                    if (app.applyingCouponState) {
                        return 'Applying...';
                    }
                    if (!app.isInHighIntentSinglePageCheckoutAnyVariation) {
                        return "Apply Coupon";
                    }
                    if (app.coupon && !app.regMetadata.couponCode) {
                        return React.createElement(React.Fragment, null,
                            React.createElement(InlineSvgComponents_1.InlineSvg, { src: "/images/icons/material/icon-check-circle-filled-20.svg" }),
                            React.createElement("span", null, "Coupon applied"));
                    }
                    return "Apply coupon";
                };
                var getPlaceholder = function () {
                    if (app.isInHighIntentSinglePageCheckoutAnyVariation) {
                        return "Coupon code";
                    }
                    if (!ReactRegAppUtil_1.reactRegAppUtil.isUserScreenViewMobile() && remspect.isControl("desktopRegDelighter")) {
                        return "Coupon code";
                    }
                    return "";
                };
                return React.createElement(React.Fragment, null, app.showCouponCodeInput && React.createElement("div", { className: topDivClassName },
                    app.isInHighIntentSinglePageCheckoutAnyVariation && React.createElement("div", { className: "coupon-code-header" }, "Coupon code"),
                    React.createElement("div", { className: "col-xs-12 col-sm-10 col-md-7 coupon-code-input" },
                        !app.isInHighIntentSinglePageCheckoutAnyVariation && (ReactRegAppUtil_1.reactRegAppUtil.isUserScreenViewMobile() || !remspect.isControl("desktopRegDelighter")) && React.createElement("span", { className: "dynamic-form__label" },
                            React.createElement("span", { className: "dynamic-form__label--delighter" }, "Coupon Code")),
                        React.createElement("input", { autoComplete: "placeholder-coupon", className: "form-control coupon-code-input-element", "data-cname": "reg_form_coupon_code", "test-id": "reg_form_coupon_code", size: 10, type: "text", name: "couponCode", placeholder: getPlaceholder(), ref: this.inputRef, value: (_a = app.regMetadata.couponCode) !== null && _a !== void 0 ? _a : "", onChange: onInputChange, maxLength: 50 }),
                        !app.isInHighIntentSinglePageCheckoutAnyVariation && feedback,
                        app.isInHighIntentSinglePageCheckoutAnyVariation && React.createElement(React.Fragment, null,
                            React.createElement("div", { className: "coupon-code-success" }, feedback))),
                    React.createElement("div", { className: "col-xs-12 col-sm-10 col-md-5 coupon-code-btn" },
                        React.createElement("button", { type: "button", className: "".concat(app.isInHighIntentSinglePageCheckoutAnyVariation ? 'apply-coupon-single-page-btn'
                                : 'btn btn-sm btn-blue btn-block', " coupon form-control"), onClick: function () {
                                onSubmit();
                                app.applyCoupon().then(onApply);
                            }, "data-cname": "reg_form_apply_coupon_code", "test-id": "reg_form_apply_coupon_code" }, getApplyCouponButtonLabel())),
                    !app.isInHighIntentSinglePageCheckoutAnyVariation && React.createElement(React.Fragment, null,
                        React.createElement("div", { className: "col-xs-12 coupon-code-success" }, app.validCoupon && app.paidTrialPrice && !app.referred &&
                            React.createElement("div", { className: "feedbackText successText", "test-id": "reg_form_coupon_code_success" },
                                "Coupon Code Successful. Your new monthly price is ",
                                (0, react_study_helpers_1.currency)(app.coupon.discountPriceCents / 100),
                                "/mo")))));
            }
        });
        return _CouponCode;
    }(React.Component)));
    exports.CompactCouponCode = (0, mobx_react_1.observer)((function (_super) {
        __extends(CompactCouponCode, _super);
        function CompactCouponCode() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            Object.defineProperty(_this, "inputRef", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: React.createRef()
            });
            return _this;
        }
        Object.defineProperty(CompactCouponCode.prototype, "render", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                var _a;
                var app = this.props.app;
                if (!app.showCouponCodeInput) {
                    return null;
                }
                var inputContainerClasses = ["reg-form__coupon-code"];
                if ((app.validCoupon != null && !app.validCoupon) || !!app.couponValidationError) {
                    inputContainerClasses.push("reg-form__coupon-code--error");
                }
                else if (app.validCoupon) {
                    inputContainerClasses.push("reg-form__coupon-code--success");
                }
                return (React.createElement("div", { className: inputContainerClasses.join(" ") },
                    React.createElement("input", { autoComplete: "placeholder-coupon", className: "form-control", "data-cname": "reg_form_coupon_code", "test-id": "reg_form_coupon_code", size: 10, type: "text", name: "couponCode", placeholder: "PROMO", ref: this.inputRef, value: (_a = app.regMetadata.couponCode) !== null && _a !== void 0 ? _a : "", onChange: (0, mobx_1.action)(function () { return _this.handleOnChange(); }), onKeyPress: (0, mobx_1.action)(function (e) { return _this.handleOnKeyPress(e); }), onBlur: (0, mobx_1.action)(function (e) { return _this.handleOnBlur(e); }), maxLength: 50 })));
            }
        });
        Object.defineProperty(CompactCouponCode.prototype, "handleOnChange", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var app = this.props.app;
                app.regMetadata.couponCode = this.inputRef.current.value;
                app.validCoupon = null;
                app.couponValidationError = "";
                app.coupon = null;
            }
        });
        Object.defineProperty(CompactCouponCode.prototype, "handleOnKeyPress", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (e) {
                if (e.key === "Enter") {
                    var shouldClearCouponInputOnError = false;
                    this.props.app.applyCoupon(shouldClearCouponInputOnError);
                    e.preventDefault();
                }
            }
        });
        Object.defineProperty(CompactCouponCode.prototype, "handleOnBlur", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (e) {
                if (this.inputRef.current.value) {
                    var shouldClearCouponInputOnError = false;
                    this.props.app.applyCoupon(shouldClearCouponInputOnError);
                }
            }
        });
        return CompactCouponCode;
    }(React.Component)));
    var FreeTrialDisclaimer = function () {
        return React.createElement("div", { className: "col-xs-12 disclaimer-text" },
            React.createElement("p", { className: "small" },
                "By creating an account, you agree to Study.com's ",
                React.createElement("a", { href: "https://study.com/pages/terms_of_use.html", target: "_blank", tabIndex: -1, "data-cname": "terms_of_use" }, "Terms of Use"),
                " and ",
                React.createElement("a", { href: "https://study.com/pages/privacy_policy.html", target: "_blank", tabIndex: -1, "data-cname": "privacy_policy" }, "Privacy Policy"),
                "."));
    };
    exports.FreeTrialDisclaimer = FreeTrialDisclaimer;
    exports.BackButton = (0, mobx_react_1.observer)(function (props) {
        return React.createElement(React.Fragment, null, !props.app.form.submitting && React.createElement("a", { type: 'button', className: "back", "data-cname": "reg_back_button", "test-id": "reg_back_button", onClick: function () { return props.app.form.goBack(); } }, "back"));
    });
    exports.ParentEmailConfirmationModalView = (0, mobx_react_1.observer)((function (_super) {
        __extends(_ParentEmailConfirmationModalView, _super);
        function _ParentEmailConfirmationModalView(props) {
            var _this = _super.call(this, props) || this;
            _this.state = { isOpen: true };
            return _this;
        }
        Object.defineProperty(_ParentEmailConfirmationModalView.prototype, "doConfirm", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this.setState({ isOpen: false });
                this.props.confirm();
            }
        });
        Object.defineProperty(_ParentEmailConfirmationModalView.prototype, "doChangeEmail", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this.setState({ isOpen: false });
                this.props.changeEmail();
            }
        });
        Object.defineProperty(_ParentEmailConfirmationModalView.prototype, "render", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                return React.createElement(react_bootstrap_1.Modal, { show: this.state.isOpen, className: "parent-email-confirm-modal", "data-cname": "parent_email_confirm_modal", "test-id": "parent_email_confirm_modal" },
                    React.createElement(react_bootstrap_1.Modal.Body, { className: "modal-body" },
                        React.createElement("div", { className: "parent-email-confirm-modal__disclaimer" }, "Confirm this is the parent's email address and not the student's"),
                        React.createElement("div", { className: "parent-email-confirm-modal__email", "test-id": "parent_email_confirm_modal_email" }, this.props.app.registrationData.email),
                        React.createElement("div", { className: "parent-email-confirm-modal__buttons" },
                            React.createElement("button", { onClick: function () { return _this.doConfirm(); }, className: "btn btn-md btn-primary", "data-cname": "parent_email_confirm_modal_continue", "test-id": "parent_email_confirm_modal_continue" }, "Confirm & Join")),
                        React.createElement("div", { className: "parent-email-confirm-modal__buttons" },
                            React.createElement("button", { onClick: function () { return _this.doChangeEmail(); }, className: "btn btn-link parent-email-confirm-modal__buttons--link", "data-cname": "parent_email_confirm_modal_change", "test-id": "parent_email_confirm_modal_change" }, "Change email"))));
            }
        });
        return _ParentEmailConfirmationModalView;
    }(React.Component)));
    function loadAndOpenParentEmailConfirmationModal(app) {
        var modalElement = document.createElement("div");
        document.body.appendChild(modalElement);
        var confirm = undefined;
        var changeEmail = undefined;
        var promise = new Promise(function (resolve, reject) {
            confirm = function () {
                resolve();
            };
            changeEmail = function () {
                reject();
            };
        });
        ReactDOM.render(React.createElement(GenericErrorBoundary_1.GenericErrorBoundaryView, null,
            React.createElement(react_study_helpers_1.StudyThemeProvider, null,
                React.createElement(exports.ParentEmailConfirmationModalView, { confirm: confirm, changeEmail: changeEmail, app: app }))), modalElement);
        return promise;
    }
    exports.loadAndOpenParentEmailConfirmationModal = loadAndOpenParentEmailConfirmationModal;
    exports.WhyPaymentInfoModalView = (0, mobx_react_1.observer)((function (_super) {
        __extends(_WhyPaymentInfoModalView, _super);
        function _WhyPaymentInfoModalView(props) {
            var _this = _super.call(this, props) || this;
            _this.state = { isOpen: true };
            return _this;
        }
        Object.defineProperty(_WhyPaymentInfoModalView.prototype, "closeModal", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this.setState({ isOpen: false });
                this.props.cleanup();
            }
        });
        ;
        Object.defineProperty(_WhyPaymentInfoModalView.prototype, "render", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                return React.createElement(react_bootstrap_1.Modal, { show: this.state.isOpen, className: "infoModal", dialogClassName: "payment-info-modal" },
                    React.createElement(react_bootstrap_1.Modal.Header, null,
                        React.createElement(react_bootstrap_1.CloseButton, { onClick: function () { return _this.closeModal(); }, "test-id": "close_why_payment_modal", "data-cname": "close_why_payment_modal" })),
                    React.createElement(react_bootstrap_1.Modal.Body, { className: "modal-body", "data-cname": "why_payment_modal", "test-id": "why_payment_modal", ref: (0, react_track_visible_1.trackingRef)() },
                        React.createElement("h3", { className: "modal-title", id: "myModalLabel" }, "Payment Information"),
                        React.createElement("h4", null, "Here's why we ask for your payment info:"),
                        React.createElement("ol", null,
                            React.createElement("li", null,
                                React.createElement("b", null, "Integrity."),
                                " Without a credit card on file, spammers could create fake accounts and ruin the integrity of our program. Credit cards ensure people like you, who are serious about their education, can access this incredible resource."),
                            React.createElement("li", null,
                                React.createElement("b", null, "Easy for you to continue."),
                                " This also makes it easy for you to save your progress and continue studying.")),
                        React.createElement("p", null, "Remember, you can cancel anytime in just a few simple clicks."),
                        React.createElement("div", { className: "text-center" },
                            React.createElement("a", { className: "btn btn-ghost-primary btn-cta", onClick: function () { return _this.closeModal(); }, "aria-label": "Close", "data-cname": "close_why_payment_modal_bottom", "test-id": "close_why_payment_modal_bottom" }, "Close"))));
            }
        });
        return _WhyPaymentInfoModalView;
    }(React.Component)));
    function loadAndOpenWhyPaymentInfoModal() {
        var modalElement = document.createElement("div");
        document.body.appendChild(modalElement);
        var cleanup = function () {
            document.body.removeChild(modalElement);
        };
        ReactDOM.render(React.createElement(GenericErrorBoundary_1.GenericErrorBoundaryView, null,
            React.createElement(react_study_helpers_1.StudyThemeProvider, null,
                React.createElement(exports.WhyPaymentInfoModalView, { cleanup: cleanup }))), modalElement);
    }
    exports.loadAndOpenWhyPaymentInfoModal = loadAndOpenWhyPaymentInfoModal;
    exports.VenmoErrorModalView = (0, mobx_react_1.observer)((function (_super) {
        __extends(_VenmoErrorModalView, _super);
        function _VenmoErrorModalView(props) {
            var _this = _super.call(this, props) || this;
            _this.state = { isOpen: true };
            return _this;
        }
        Object.defineProperty(_VenmoErrorModalView.prototype, "closeModal", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this.setState({ isOpen: false });
                this.props.cleanup();
            }
        });
        ;
        Object.defineProperty(_VenmoErrorModalView.prototype, "closeModalAndSelectCreditCard", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this.closeModal();
                this.props.app.onClickPaymentMethod("CREDIT CARD");
            }
        });
        Object.defineProperty(_VenmoErrorModalView.prototype, "closeModalAndSelectPaypal", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this.closeModal();
                if (this.isBraintreeV3() && this.isMobile()) {
                    this.props.app.submitRegFormWithPayPal();
                }
                else {
                    this.props.app.onClickPaymentMethod("PAYPAL");
                }
            }
        });
        Object.defineProperty(_VenmoErrorModalView.prototype, "closeModalAndSelectGooglePay", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this.closeModal();
                this.props.app.submitRegFormWithGoogle();
            }
        });
        Object.defineProperty(_VenmoErrorModalView.prototype, "isMobile", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return window.screen.width < 600;
            }
        });
        Object.defineProperty(_VenmoErrorModalView.prototype, "isV2", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return remspect.isVariation("fakeVenmo", "V2");
            }
        });
        Object.defineProperty(_VenmoErrorModalView.prototype, "isBraintreeV3", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return remspect.isVariation("braintree", "V3");
            }
        });
        Object.defineProperty(_VenmoErrorModalView.prototype, "showAltPayButtons", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var app = this.props.app;
                var regData = app.registrationData;
                return this.isBraintreeV3() && this.isMobile() &&
                    regData.billingFirstName && regData.billingLastName && regData.billingAddressCountry && !app.form.submitting;
            }
        });
        Object.defineProperty(_VenmoErrorModalView.prototype, "getAvailablePaymentsString", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                if (this.isV2()) {
                    if (this.showAltPayButtons()) {
                        if (this.props.app.canUseApplePay()) {
                            return "Credit card, Apple Pay, and PayPal payments are still available.";
                        }
                        else {
                            return "Credit card, Google Pay, and PayPal payments are still available.";
                        }
                    }
                    else {
                        return "Credit card and PayPal payments are still available.";
                    }
                }
                else {
                    if (this.showAltPayButtons()) {
                        if (this.props.app.canUseApplePay()) {
                            return "Credit card and Apple Pay payments are still available.";
                        }
                        else {
                            return "Credit card and Google Pay payments are still available.";
                        }
                    }
                    return "Credit card payments are still available.";
                }
            }
        });
        Object.defineProperty(_VenmoErrorModalView.prototype, "render", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                var app = this.props.app;
                return React.createElement(react_bootstrap_1.Modal, { show: this.state.isOpen, id: "venmoErrorModal", className: "infoModal", dialogClassName: "payment-info-modal", centered: true },
                    React.createElement(react_bootstrap_1.Modal.Header, null,
                        React.createElement(react_bootstrap_1.CloseButton, { onClick: function () { return _this.closeModal(); }, "test-id": "close_venmo_error_modal", "data-cname": "close_venmo_error_modal" })),
                    React.createElement(react_bootstrap_1.Modal.Body, { className: "venmo-error-modal-body", "data-cname": "venmo_error_modal", "test-id": "venmo_error_modal", ref: (0, react_track_visible_1.trackingRef)() },
                        React.createElement("h3", { className: "venmo-error-modal-title", id: "myModalLabel" }, "Sorry, Venmo is not available right now"),
                        React.createElement("p", null,
                            "We\u2019re having trouble connecting to Venmo. We apologize for the inconvenience.",
                            React.createElement("br", null),
                            React.createElement("br", null),
                            this.getAvailablePaymentsString()),
                        React.createElement("div", { className: "venmo-error-modal-bottom-buttons" },
                            React.createElement("a", { className: "btn btn-primary btn-cta", onClick: function () { return _this.closeModalAndSelectCreditCard(); }, "data-cname": "pay_with_credit_card_venmo_error_modal_button", "test-id": "pay_with_credit_card_venmo_error_modal_button" }, "Pay with credit card"),
                            this.showAltPayButtons() && (app.canUseApplePay() ? (React.createElement("a", { className: "btn btn-ghost-primary btn-cta visible-phone-xl", "data-apple-pay-click": "", onClick: function () { return _this.closeModal(); }, "data-cname": "pay_with_apple_pay_venmo_error_modal_button", "test-id": "pay_with_apple_pay_venmo_error_modal_button" }, "Pay with Apple Pay")) : (React.createElement("a", { className: "btn btn-ghost-primary btn-cta visible-phone-xl", onClick: function () { return _this.closeModalAndSelectGooglePay(); }, "data-cname": "pay_with_google_pay_venmo_error_modal_button", "test-id": "pay_with_google_pay_venmo_error_modal_button" }, "Pay with Google Pay"))),
                            this.isV2() && (React.createElement("a", { className: "btn btn-ghost-primary btn-cta", onClick: function () { return _this.closeModalAndSelectPaypal(); }, "data-cname": "pay_with_paypal_venmo_error_modal_button", "test-id": "pay_with_paypal_venmo_error_modal_button" }, "Pay with PayPal")))));
            }
        });
        return _VenmoErrorModalView;
    }(React.Component)));
    function loadAndOpenVenmoErrorModal(app) {
        var modalElement = document.createElement("div");
        document.body.appendChild(modalElement);
        var cleanup = function () {
            document.body.removeChild(modalElement);
        };
        ReactDOM.render(React.createElement(GenericErrorBoundary_1.GenericErrorBoundaryView, null,
            React.createElement(react_study_helpers_1.StudyThemeProvider, null,
                React.createElement(exports.VenmoErrorModalView, { app: app, cleanup: cleanup }))), modalElement);
    }
    exports.loadAndOpenVenmoErrorModal = loadAndOpenVenmoErrorModal;
    var ExpirationDateTextInputViewClazz = (function (_super) {
        __extends(ExpirationDateTextInputViewClazz, _super);
        function ExpirationDateTextInputViewClazz() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            Object.defineProperty(_this, "inputRef", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: React.createRef()
            });
            return _this;
        }
        Object.defineProperty(ExpirationDateTextInputViewClazz.prototype, "render", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                var placeholder = this.props.questionStore.placeholder;
                if (!placeholder) {
                    placeholder = "mm/yy";
                    if (!ReactRegAppUtil_1.reactRegAppUtil.isUserScreenViewMobile() && remspect.isControl("desktopRegDelighter")) {
                        placeholder = "01/24";
                    }
                }
                return React.createElement("input", { type: "text", inputMode: "numeric", name: "expirationDate", "data-cname": "reg_form_cc_expiration_date", "test-id": "reg_form_cc_expiration_date", className: "dynamic-form__text", placeholder: placeholder, ref: this.inputRef, maxLength: 5, onBlur: (0, mobx_1.action)(function () { return _this.onBlur(); }), onKeyUp: (0, mobx_1.action)(function (e) { return _this.onKeyUp(e); }), "data-no-log": true, autoComplete: "cc-exp" });
            }
        });
        Object.defineProperty(ExpirationDateTextInputViewClazz.prototype, "getInputValue", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _a;
                return (_a = this.inputRef.current.value) !== null && _a !== void 0 ? _a : "";
            }
        });
        Object.defineProperty(ExpirationDateTextInputViewClazz.prototype, "onKeyUp", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (e) {
                var questionStore = this.props.questionStore;
                var newValue = this.getInputValue();
                var shouldMassageInput = !(e.key == "Backspace");
                if (shouldMassageInput) {
                    var beforeValue = newValue;
                    newValue = this.massageValue(beforeValue);
                    if (beforeValue != newValue) {
                        this.inputRef.current.value = newValue;
                    }
                }
                if (questionStore.dirty) {
                    this.persistInputValueToStore(newValue);
                }
            }
        });
        Object.defineProperty(ExpirationDateTextInputViewClazz.prototype, "onBlur", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var questionStore = this.props.questionStore;
                var inputValue = this.getInputValue();
                if (inputValue.trim().length == 0 && !questionStore.dirty) {
                    return;
                }
                this.persistInputValueToStore(inputValue);
            }
        });
        Object.defineProperty(ExpirationDateTextInputViewClazz.prototype, "persistInputValueToStore", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (value) {
                var questionStore = this.props.questionStore;
                questionStore.setValue(value);
            }
        });
        Object.defineProperty(ExpirationDateTextInputViewClazz.prototype, "massageValue", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (rawValue) {
                return (rawValue !== null && rawValue !== void 0 ? rawValue : "")
                    .replace(/^([1-9]\/|[2-9])$/g, '0$1/')
                    .replace(/^(0[1-9]|1[0-2])(\d?)$/g, '$1/$2')
                    .replace(/^([0-1])([3-9])$/g, '0$1/$2')
                    .replace(/^(0?[1-9]|1[0-2])([0-9]{2})$/g, '$1/$2')
                    .replace(/^([0]+)\/|[0]+$/g, '0')
                    .replace(/[^\d\/]|^[\/]*$/g, '')
                    .replace(/\/\//g, '/');
            }
        });
        Object.defineProperty(ExpirationDateTextInputViewClazz.prototype, "onSubmit", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var inputValue = this.getInputValue();
                this.persistInputValueToStore(inputValue);
            }
        });
        Object.defineProperty(ExpirationDateTextInputViewClazz, "extractMonthStr", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (expirationDateVal) {
                if ((expirationDateVal !== null && expirationDateVal !== void 0 ? expirationDateVal : "").trim().length == 0) {
                    return null;
                }
                var parts = expirationDateVal.trim().split("/");
                if (parts.length != 2) {
                    return null;
                }
                var monthVal = Number(parts[0]);
                if (isNaN(monthVal)) {
                    return null;
                }
                return monthVal.toString();
            }
        });
        Object.defineProperty(ExpirationDateTextInputViewClazz, "extractYearStr", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (expirationDateVal) {
                if ((expirationDateVal !== null && expirationDateVal !== void 0 ? expirationDateVal : "").trim().length == 0) {
                    return null;
                }
                var parts = expirationDateVal.trim().split("/");
                if (parts.length != 2) {
                    return null;
                }
                var yearVal = Number(parts[1]);
                if (isNaN(yearVal)) {
                    return null;
                }
                return (yearVal + 2000).toString();
            }
        });
        Object.defineProperty(ExpirationDateTextInputViewClazz, "isValid", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (expirationDateVal) {
                return this.getErrorMessageIfInvalid(expirationDateVal) == null;
            }
        });
        Object.defineProperty(ExpirationDateTextInputViewClazz, "getErrorMessageIfInvalid", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (expirationDateVal) {
                var rawValue = expirationDateVal !== null && expirationDateVal !== void 0 ? expirationDateVal : "";
                if (rawValue.trim().length == 0) {
                    return null;
                }
                var DEFAULT_ERROR_MESSAGE = (React.createElement("span", { ref: (0, react_track_visible_1.trackingRef)(), "data-cname": "reg_error_expiration_date_invalid", "test-id": "reg_error_expiration_date_invalid" }, "Make sure your credit card's expiration date is MM/YY and has not yet expired"));
                if (rawValue.length != 5 || rawValue.indexOf("/") != 2) {
                    return DEFAULT_ERROR_MESSAGE;
                }
                var parts = rawValue.split("/");
                if (parts.length != 2) {
                    return DEFAULT_ERROR_MESSAGE;
                }
                var monthVal = Number(parts[0]);
                var yearVal = Number(parts[1]) + 2000;
                if (isNaN(monthVal) || isNaN(yearVal)) {
                    return DEFAULT_ERROR_MESSAGE;
                }
                var currentYear = new Date().getFullYear();
                var currentMonth = new Date().getMonth() + 1;
                var EXPIRATION_DATE_IS_PAST = (React.createElement("span", { ref: (0, react_track_visible_1.trackingRef)(), "data-cname": "reg_error_expiration_date_expired", "test-id": "reg_error_expiration_date_expired" }, "Your credit card's expiration date must be in the future"));
                if (yearVal < currentYear) {
                    return EXPIRATION_DATE_IS_PAST;
                }
                if (yearVal == currentYear && monthVal < currentMonth) {
                    return EXPIRATION_DATE_IS_PAST;
                }
                return null;
            }
        });
        return ExpirationDateTextInputViewClazz;
    }(React.Component));
    exports.ExpirationDateTextInputViewClazz = ExpirationDateTextInputViewClazz;
    exports.ExpirationDateTextInputView = (0, mobx_react_1.observer)(ExpirationDateTextInputViewClazz);
});

//# sourceMappingURL=RegPaymentMethodTabsViews.js.map
