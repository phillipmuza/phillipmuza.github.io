var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define(["require", "exports", "classroom/teacher/customCourse/CustomCourseService", "lib/toastr", "member/info/member-info.util", "mobx", "mobx-react", "react", "@tippyjs/react", "util/SupportArticleLinkView"], function (require, exports, CustomCourseService_1, toastr, member_info_util_1, mobx_1, mobx_react_1, React, react_1, SupportArticleLinkView_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SuccessfulSavePanelComponent = exports.AvailableCustomTopicsPanelComponent = exports.NewCustomCourseInputComponent = exports.AvailableCustomCoursesPanelComponent = exports.FirstCustomCoursePanelComponent = exports.SignUpCtaComponent = exports.UpgradeCtaComponent = exports.CustomCourseFeatureComponent = exports.CustomCourseButtonContentComponent = exports.CustomCourseDropdownMenuComponent = exports.CustomCourseButtonComponent = exports.CustomCourseModuleView = void 0;
    var CustomCourseViewState;
    (function (CustomCourseViewState) {
        CustomCourseViewState[CustomCourseViewState["LOADING"] = 0] = "LOADING";
        CustomCourseViewState[CustomCourseViewState["SHOW_AVAILABLE_COURSES"] = 1] = "SHOW_AVAILABLE_COURSES";
        CustomCourseViewState[CustomCourseViewState["SHOW_AVAILABLE_TOPICS"] = 2] = "SHOW_AVAILABLE_TOPICS";
        CustomCourseViewState[CustomCourseViewState["SHOW_CREATE_COURSE_FORM"] = 3] = "SHOW_CREATE_COURSE_FORM";
        CustomCourseViewState[CustomCourseViewState["SHOW_SUCCESS_MESSAGE"] = 4] = "SHOW_SUCCESS_MESSAGE";
    })(CustomCourseViewState || (CustomCourseViewState = {}));
    var TooltipViewState;
    (function (TooltipViewState) {
        TooltipViewState[TooltipViewState["ADD_LESSON"] = 0] = "ADD_LESSON";
        TooltipViewState[TooltipViewState["FILLED_ALL_COURSES"] = 1] = "FILLED_ALL_COURSES";
        TooltipViewState[TooltipViewState["REACHED_LIMIT"] = 2] = "REACHED_LIMIT";
    })(TooltipViewState || (TooltipViewState = {}));
    var CustomCourseModuleStore = (function () {
        function CustomCourseModuleStore(academyAssetId, customCoursesEnabled, pageViewName) {
            var _this = this;
            var _a, _b;
            Object.defineProperty(this, "DEFAULT_CHAPTER_TITLE", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: "Chapter 1"
            });
            Object.defineProperty(this, "academyAssetId", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "courseDataInitialized", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            Object.defineProperty(this, "courseList", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: []
            });
            Object.defineProperty(this, "currentLessonAcademyAssetId", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "customCoursesEnabled", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "isDropdownOpen", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            Object.defineProperty(this, "isSavingCourse", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            Object.defineProperty(this, "lastSavedLessonCourseTreeId", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "lastSavedLessonTopicTitle", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "loggedIn", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "newCourseTitle", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: ""
            });
            Object.defineProperty(this, "pageViewName", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "saveCourseErrorMessage", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: ""
            });
            Object.defineProperty(this, "selectedCourseTreeId", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "shouldShowSuccessComponent", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            Object.defineProperty(this, "customCourseLessonLimit", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: parseInt((_b = (_a = document.querySelector("[data-custom-course-lesson-limit]")) === null || _a === void 0 ? void 0 : _a.getAttribute("data-custom-course-lesson-limit")) !== null && _b !== void 0 ? _b : "0")
            });
            this.academyAssetId = academyAssetId;
            this.customCoursesEnabled = customCoursesEnabled;
            this.loggedIn = member_info_util_1.MemberInfoUtil.instance().memberInfo.isLoggedIn;
            this.pageViewName = pageViewName;
            if (member_info_util_1.MemberInfoUtil.instance().memberInfo.isLoggedIn) {
                if (academyAssetId) {
                    this.currentLessonAcademyAssetId = academyAssetId;
                }
                if (customCoursesEnabled) {
                    CustomCourseService_1.CustomCourseService.instance().courseListProxy.addValueListener((0, mobx_1.action)(function (courseList) { return _this.courseList = courseList; }));
                    var reloadCourseList = false;
                    this.loadCourseList(reloadCourseList);
                }
            }
            (0, mobx_1.makeAutoObservable)(this);
        }
        Object.defineProperty(CustomCourseModuleStore.prototype, "toggleDropdownVisibility", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                if (this.isDropdownOpen) {
                    this.closeDropdownAndResetStates();
                }
                else {
                    this.isDropdownOpen = true;
                }
            }
        });
        Object.defineProperty(CustomCourseModuleStore.prototype, "closeDropdownAndResetStates", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this.isDropdownOpen = false;
                this.setSelectedCourse(null);
                this.setNewCourseTitle("");
                this.shouldShowSuccessComponent = false;
            }
        });
        Object.defineProperty(CustomCourseModuleStore.prototype, "loadCourseList", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (reload) {
                var _this = this;
                if (reload === void 0) { reload = true; }
                if (!this.customCoursesEnabled) {
                    return;
                }
                if (!reload) {
                    CustomCourseService_1.CustomCourseService.instance().courseListProxy.getValue().then((0, mobx_1.action)(function () { return _this.courseDataInitialized = true; }));
                }
                else {
                    CustomCourseService_1.CustomCourseService.instance().courseListProxy.reloadValue();
                }
            }
        });
        Object.defineProperty(CustomCourseModuleStore.prototype, "showError", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (error) {
                var toastTitle = "Error!";
                if (this.isStudyError(error)) {
                    var titleIsBlankOrTooShort = (error.errorCode === "CUSTOM_COURSE_MODULE__SHORT_TITLE");
                    var titleIsTooLong = (error.errorCode === "CUSTOM_COURSE_MODULE__LONG_TITLE");
                    var titleAlreadyExists = (error.errorCode === "CUSTOM_COURSE_MODULE__DUPLICATE_TITLE");
                    toastTitle = error.displayError;
                    if (titleIsBlankOrTooShort || titleIsTooLong || titleAlreadyExists) {
                        this.saveCourseErrorMessage = error.displayError;
                        return;
                    }
                }
                toastr.error("Please try refreshing the page", toastTitle, {
                    positionClass: "toast-top-center"
                });
            }
        });
        Object.defineProperty(CustomCourseModuleStore.prototype, "isStudyError", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (error) {
                return error instanceof Error && error.errorCode != null && error.displayError != null;
            }
        });
        Object.defineProperty(CustomCourseModuleStore.prototype, "isUnderCourseLimit", {
            get: function () {
                return this.courseList.length < CustomCourseService_1.CustomCourseConstants.COURSE_LIMIT;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CustomCourseModuleStore.prototype, "selectedCourse", {
            get: function () {
                if (!this.selectedCourseTreeId) {
                    return null;
                }
                for (var _i = 0, _a = this.courseList; _i < _a.length; _i++) {
                    var course = _a[_i];
                    if (course.academyAssetTreeId === this.selectedCourseTreeId) {
                        return course;
                    }
                }
                return null;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CustomCourseModuleStore.prototype, "lastSavedLessonTopic", {
            get: function () {
                var _a, _b;
                if (!this.lastSavedLessonTopicTitle || !((_b = (_a = this.lastSavedLessonCourse) === null || _a === void 0 ? void 0 : _a.topics) === null || _b === void 0 ? void 0 : _b.length)) {
                    return null;
                }
                for (var _i = 0, _c = this.lastSavedLessonCourse.topics; _i < _c.length; _i++) {
                    var topic = _c[_i];
                    if (topic.title === this.lastSavedLessonTopicTitle) {
                        return topic;
                    }
                }
                return null;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CustomCourseModuleStore.prototype, "lastSavedLessonCourse", {
            get: function () {
                if (!this.lastSavedLessonCourseTreeId) {
                    return null;
                }
                for (var _i = 0, _a = this.courseList; _i < _a.length; _i++) {
                    var course = _a[_i];
                    if (course.academyAssetTreeId === this.lastSavedLessonCourseTreeId) {
                        return course;
                    }
                }
                return null;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CustomCourseModuleStore.prototype, "isCurrentLessonInCourse", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (course) {
                if (!(course === null || course === void 0 ? void 0 : course.topics)) {
                    return false;
                }
                for (var i = 0; i < course.topics.length; i++) {
                    var topic = course.topics[i];
                    if (this.isCurrentLessonInTopic(topic)) {
                        return true;
                    }
                }
                return false;
            }
        });
        Object.defineProperty(CustomCourseModuleStore.prototype, "isCurrentLessonInTopic", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (topic) {
                if (!(topic === null || topic === void 0 ? void 0 : topic.lessons)) {
                    return false;
                }
                for (var i = 0; i < topic.lessons.length; i++) {
                    var lesson = topic.lessons[i];
                    if (lesson.academyAssetId === this.currentLessonAcademyAssetId) {
                        return true;
                    }
                }
                return false;
            }
        });
        Object.defineProperty(CustomCourseModuleStore.prototype, "isUnderLessonLimit", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (course) {
                var _a, _b;
                var lessonLimit = parseInt((_b = (_a = document.querySelector("[data-custom-course-lesson-limit]")) === null || _a === void 0 ? void 0 : _a.getAttribute("data-custom-course-lesson-limit")) !== null && _b !== void 0 ? _b : "0");
                return this.getLessonCount(course) < lessonLimit;
            }
        });
        Object.defineProperty(CustomCourseModuleStore.prototype, "getLessonCount", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (course) {
                var _a, _b;
                var lessonCount = 0;
                if (!course) {
                    return lessonCount;
                }
                if ((_a = course.mDynamicIntFields) === null || _a === void 0 ? void 0 : _a.lessonCount) {
                    lessonCount = course.mDynamicIntFields.lessonCount;
                }
                else if (((_b = course.topics) === null || _b === void 0 ? void 0 : _b.length) > 0) {
                    lessonCount = course.topics.reduce(function (accumulator, topic) { var _a, _b; return accumulator + ((_b = (_a = topic === null || topic === void 0 ? void 0 : topic.lessons) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0); }, 0);
                }
                return lessonCount;
            }
        });
        Object.defineProperty(CustomCourseModuleStore.prototype, "customCourseViewState", {
            get: function () {
                if (!this.courseDataInitialized) {
                    return CustomCourseViewState.LOADING;
                }
                if (this.shouldShowSuccessComponent) {
                    return CustomCourseViewState.SHOW_SUCCESS_MESSAGE;
                }
                if (this.selectedCourse) {
                    return CustomCourseViewState.SHOW_AVAILABLE_TOPICS;
                }
                if (this.courseList.length === 0) {
                    return CustomCourseViewState.SHOW_CREATE_COURSE_FORM;
                }
                return CustomCourseViewState.SHOW_AVAILABLE_COURSES;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CustomCourseModuleStore.prototype, "tooltipViewState", {
            get: function () {
                var shouldShowCurrentLessonExistsInAllCourses = true;
                var shouldShowQuotasFilled = true;
                if (this.isUnderCourseLimit) {
                    shouldShowCurrentLessonExistsInAllCourses = false;
                    shouldShowQuotasFilled = false;
                }
                for (var course in this.courseList) {
                    if (!this.isCurrentLessonInCourse(this.courseList[course])) {
                        shouldShowCurrentLessonExistsInAllCourses = false;
                    }
                    if (this.isUnderLessonLimit(this.courseList[course])) {
                        shouldShowQuotasFilled = false;
                    }
                }
                if (shouldShowCurrentLessonExistsInAllCourses) {
                    return TooltipViewState.FILLED_ALL_COURSES;
                }
                if (shouldShowQuotasFilled) {
                    return TooltipViewState.REACHED_LIMIT;
                }
                return TooltipViewState.ADD_LESSON;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CustomCourseModuleStore.prototype, "createCourseWithCurrentLesson", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (e) {
                e.preventDefault();
                this.createCourseInternal(this.currentLessonAcademyAssetId);
            }
        });
        Object.defineProperty(CustomCourseModuleStore.prototype, "createCourseInternal", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (firstLessonAcademyAssetId) {
                var _this = this;
                this.isSavingCourse = true;
                var courseTitle = this.newCourseTitle;
                CustomCourseService_1.CustomCourseService.instance().createCourse(courseTitle, firstLessonAcademyAssetId)
                    .then((0, mobx_1.action)(function (courseTreeId) {
                    if (firstLessonAcademyAssetId) {
                        _this.lastSavedLessonCourseTreeId = courseTreeId;
                        _this.lastSavedLessonTopicTitle = _this.DEFAULT_CHAPTER_TITLE;
                    }
                    _this.setSelectedCourse({
                        academyAssetTreeId: courseTreeId,
                    });
                    _this.loadCourseList();
                    _this.shouldShowSuccessComponent = true;
                    _this.newCourseTitle = "";
                }))
                    .catch((0, mobx_1.action)(function (error) { return _this.showError(error); }))
                    .finally((0, mobx_1.action)(function () { return _this.isSavingCourse = false; }));
            }
        });
        Object.defineProperty(CustomCourseModuleStore.prototype, "setSelectedCourse", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (course) {
                this.selectedCourseTreeId = course === null || course === void 0 ? void 0 : course.academyAssetTreeId;
            }
        });
        Object.defineProperty(CustomCourseModuleStore.prototype, "setNewCourseTitle", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (newTitle) {
                this.newCourseTitle = newTitle;
                this.saveCourseErrorMessage = "";
            }
        });
        Object.defineProperty(CustomCourseModuleStore.prototype, "displayTopicOptionsOrAddCurrentLessonToOnlyTopic", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (course) {
                var _a, _b;
                if (((_b = (_a = course === null || course === void 0 ? void 0 : course.topics) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) === 0) {
                    this.addCurrentLessonToEmptyCourse(course);
                }
                else if (course.topics.length === 1) {
                    this.addCurrentLessonToTopic(course, course.topics[0]);
                }
                else {
                    this.shouldShowSuccessComponent = false;
                    this.setSelectedCourse(course);
                }
            }
        });
        Object.defineProperty(CustomCourseModuleStore.prototype, "addCurrentLessonToTopic", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (course, topic) {
                var _this = this;
                if (!course || !topic) {
                    return;
                }
                CustomCourseService_1.CustomCourseService.instance().addLessonToTopic(this.currentLessonAcademyAssetId, topic.academyAssetId, course.academyAssetId)
                    .then((0, mobx_1.action)(function () {
                    _this.loadCourseList();
                    _this.lastSavedLessonCourseTreeId = course.academyAssetTreeId;
                    _this.lastSavedLessonTopicTitle = topic.title;
                    _this.shouldShowSuccessComponent = true;
                }))
                    .catch((0, mobx_1.action)(function (error) { return _this.showError(error); }));
            }
        });
        Object.defineProperty(CustomCourseModuleStore.prototype, "addCurrentLessonToEmptyCourse", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (course) {
                var _this = this;
                if (!course) {
                    return;
                }
                CustomCourseService_1.CustomCourseService.instance().addLessonToEmptyCourse(this.currentLessonAcademyAssetId, course.academyAssetId)
                    .then((0, mobx_1.action)(function () {
                    _this.loadCourseList();
                    _this.lastSavedLessonCourseTreeId = course.academyAssetTreeId;
                    _this.lastSavedLessonTopicTitle = _this.DEFAULT_CHAPTER_TITLE;
                    _this.shouldShowSuccessComponent = true;
                }))
                    .catch((0, mobx_1.action)(function (error) { return _this.showError(error); }));
            }
        });
        Object.defineProperty(CustomCourseModuleStore.prototype, "getCourseLimit", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return CustomCourseService_1.CustomCourseConstants.COURSE_LIMIT;
            }
        });
        Object.defineProperty(CustomCourseModuleStore.prototype, "getLastSavedLessonDestinationString", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var strArray = [];
                if (this.lastSavedLessonCourse) {
                    strArray.push(this.lastSavedLessonCourse.title);
                }
                if (this.lastSavedLessonTopic) {
                    strArray.push(this.lastSavedLessonTopic.title);
                }
                return strArray.join(", ");
            }
        });
        return CustomCourseModuleStore;
    }());
    exports.CustomCourseModuleView = (0, mobx_react_1.observer)((function (_super) {
        __extends(CustomCourseModuleView, _super);
        function CustomCourseModuleView(props) {
            var _this = _super.call(this, props) || this;
            Object.defineProperty(_this, "store", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            _this.store = new CustomCourseModuleStore(_this.props.academyAssetId, _this.props.customCoursesEnabled, _this.props.pageViewName);
            return _this;
        }
        Object.defineProperty(CustomCourseModuleView.prototype, "render", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var store = this.store;
                return (React.createElement(React.Fragment, null,
                    React.createElement("div", { id: "customCourseDropdown", "test-id": "cust_course_module", className: "".concat((!store.loggedIn) ? "logged-out" : "") },
                        React.createElement(exports.CustomCourseButtonComponent, { store: store }),
                        React.createElement(exports.CustomCourseDropdownMenuComponent, { store: store }))));
            }
        });
        return CustomCourseModuleView;
    }(React.Component)));
    exports.CustomCourseButtonComponent = (0, mobx_react_1.observer)((function (_super) {
        __extends(CustomCourseButtonComponent, _super);
        function CustomCourseButtonComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(CustomCourseButtonComponent.prototype, "render", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var store = this.props.store;
                return (React.createElement(React.Fragment, null,
                    (store.tooltipViewState === TooltipViewState.ADD_LESSON) && (React.createElement(react_1.default, { content: "Add this lesson to your own Custom Course", placement: "bottom", disabled: store.isDropdownOpen, duration: 0 },
                        React.createElement("a", { onClick: function () { return store.toggleDropdownVisibility(); }, className: "mainButton", "data-cname": "cust_courses_lesson_menu_toggle", "test-id": "cust_courses_lesson_menu_toggle" },
                            React.createElement(exports.CustomCourseButtonContentComponent, { store: store })))),
                    (store.tooltipViewState === TooltipViewState.FILLED_ALL_COURSES) && (React.createElement(react_1.default, { content: "You've added this lesson to all your Custom Courses!", placement: "bottom", disabled: store.isDropdownOpen, duration: 0 },
                        React.createElement("span", { className: "text-muted mainButton" },
                            React.createElement(exports.CustomCourseButtonContentComponent, { store: store })))),
                    (store.tooltipViewState === TooltipViewState.REACHED_LIMIT) && (React.createElement(react_1.default, { content: "You've reached your Custom course limit! Delete a lesson from your dashboard to add this one.", placement: "bottom", disabled: store.isDropdownOpen, duration: 0 },
                        React.createElement("span", { className: "text-muted mainButton" },
                            React.createElement(exports.CustomCourseButtonContentComponent, { store: store }))))));
            }
        });
        return CustomCourseButtonComponent;
    }(React.Component)));
    exports.CustomCourseDropdownMenuComponent = (0, mobx_react_1.observer)((function (_super) {
        __extends(CustomCourseDropdownMenuComponent, _super);
        function CustomCourseDropdownMenuComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(CustomCourseDropdownMenuComponent.prototype, "render", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var store = this.props.store;
                var customCoursePanelContent;
                if (store.customCoursesEnabled) {
                    customCoursePanelContent = React.createElement(exports.CustomCourseFeatureComponent, { store: store });
                }
                else if (store.loggedIn) {
                    customCoursePanelContent = React.createElement(exports.UpgradeCtaComponent, { store: store });
                }
                else {
                    customCoursePanelContent = React.createElement(exports.SignUpCtaComponent, { store: store });
                }
                return (React.createElement(React.Fragment, null, store.isDropdownOpen && (React.createElement(React.Fragment, null,
                    React.createElement("div", { className: "custom-course-react-modal-backdrop", "test-id": "custom_course_modal_backdrop", onClick: function () { return store.closeDropdownAndResetStates(); } }),
                    React.createElement("div", { id: "customCourseDropdownMenu", className: "custom-course__dropdown-menu", "test-id": "custom_course_dropdown_menu" },
                        customCoursePanelContent,
                        React.createElement("a", { className: "dropdown-toggle visible-xs closeModal", "data-cname": "cust_courses_lesson_menu_close", "test-id": "cust_courses_lesson_menu_close", onClick: function () { return store.closeDropdownAndResetStates(); } },
                            React.createElement("span", { className: "icon-remove", "aria-hidden": "true" })))))));
            }
        });
        return CustomCourseDropdownMenuComponent;
    }(React.Component)));
    exports.CustomCourseButtonContentComponent = (0, mobx_react_1.observer)((function (_super) {
        __extends(CustomCourseButtonContentComponent, _super);
        function CustomCourseButtonContentComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(CustomCourseButtonContentComponent.prototype, "render", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var store = this.props.store;
                return (React.createElement(React.Fragment, null, store.pageViewName === "LOW_LEVEL_PILLAR" ? React.createElement(React.Fragment, null,
                    React.createElement("span", { className: "below-video-controls__text video-control-text" }, "Save\u00A0"),
                    React.createElement("i", { className: "icon-app_lesson_queued video-control-icon", "aria-hidden": "true" })) : React.createElement(React.Fragment, null,
                    React.createElement("i", { className: "icon-app_lesson_queued", "aria-hidden": "true" }),
                    React.createElement("span", { className: "below-video-controls__text" }, "\u00A0Save"))));
            }
        });
        return CustomCourseButtonContentComponent;
    }(React.Component)));
    exports.CustomCourseFeatureComponent = (0, mobx_react_1.observer)((function (_super) {
        __extends(CustomCourseFeatureComponent, _super);
        function CustomCourseFeatureComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(CustomCourseFeatureComponent.prototype, "render", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var store = this.props.store;
                return (React.createElement(React.Fragment, null,
                    (store.customCourseViewState === CustomCourseViewState.LOADING) && React.createElement("div", { className: "initializing" }, "Loading\u2026"),
                    (store.customCourseViewState !== CustomCourseViewState.LOADING) && (React.createElement("div", { className: "initialized panel panel-default" },
                        React.createElement("div", { className: "panel-heading" },
                            React.createElement("h3", { className: "panel-title panel-title-react" }, "Add Lesson to a Custom Course")),
                        React.createElement("div", { className: "panel-body" },
                            (store.customCourseViewState === CustomCourseViewState.SHOW_CREATE_COURSE_FORM) && React.createElement(exports.FirstCustomCoursePanelComponent, { store: store }),
                            (store.customCourseViewState === CustomCourseViewState.SHOW_AVAILABLE_COURSES) && React.createElement(exports.AvailableCustomCoursesPanelComponent, { store: store }),
                            (store.customCourseViewState === CustomCourseViewState.SHOW_AVAILABLE_TOPICS) && React.createElement(exports.AvailableCustomTopicsPanelComponent, { store: store }),
                            (store.customCourseViewState === CustomCourseViewState.SHOW_SUCCESS_MESSAGE) && React.createElement(exports.SuccessfulSavePanelComponent, { store: store })),
                        (store.customCourseViewState !== CustomCourseViewState.SHOW_SUCCESS_MESSAGE) && (React.createElement("div", { className: "panel-footer" },
                            (store.customCourseViewState === CustomCourseViewState.SHOW_AVAILABLE_COURSES) && (React.createElement("a", { href: "/member/my-dashboard.html#customCourses", className: "btn btn-link", "data-cname": "cust_courses_lesson_go_to_dashboard", "test-id": "cust_courses_lesson_go_to_dashboard" }, "Go to My Custom Courses")),
                            (store.customCourseViewState === CustomCourseViewState.SHOW_CREATE_COURSE_FORM) && (React.createElement("div", { "data-cname": "cust_courses_lesson_help_toggle", "test-id": "cust_courses_lesson_help_toggle" },
                                React.createElement(SupportArticleLinkView_1.SupportArticleLinkView, { linkText: "Learn More", articleType: "CUSTOM_COURSE_HELP" })))))))));
            }
        });
        return CustomCourseFeatureComponent;
    }(React.Component)));
    exports.UpgradeCtaComponent = (0, mobx_react_1.observer)((function (_super) {
        __extends(UpgradeCtaComponent, _super);
        function UpgradeCtaComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(UpgradeCtaComponent.prototype, "render", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return (React.createElement("div", { className: "upgradeCTA" },
                    React.createElement("p", null, "Upgrade your plan to add this lesson to a Custom Course."),
                    React.createElement("p", null,
                        React.createElement("a", { href: "/member/manage-membership.html", className: "btn btn-cta cta-gold", "data-cname": "cust_courses_lesson_cta_upgrade", "test-id": "cust_courses_lesson_cta_upgrade" }, "Upgrade Now"))));
            }
        });
        return UpgradeCtaComponent;
    }(React.Component)));
    exports.SignUpCtaComponent = (0, mobx_react_1.observer)((function (_super) {
        __extends(SignUpCtaComponent, _super);
        function SignUpCtaComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(SignUpCtaComponent.prototype, "render", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return (React.createElement("div", { className: "registerCTA", "test-id": "cust_courses_lesson__cta" },
                    React.createElement("p", { className: "nowrap register-cta-react-italics" }, "Want to watch this again later?"),
                    React.createElement("p", null, "Log in or sign up to add this lesson to a Custom Course."),
                    React.createElement("p", { className: "nowrap" },
                        React.createElement("a", { href: "/academy/login.html", "data-cname": "cust_courses_lesson_cta_login", "test-id": "cust_courses_lesson_cta_login" }, "Log in"),
                        React.createElement("span", { className: "register-cta-react-or" }, "or"),
                        React.createElement("a", { "data-toggle": "modal", href: "/academy/plans.html", "data-target": "#partialRegFormModal", "data-remote": "false", "data-cname": "cust_courses_lesson_cta_register", "test-id": "cust_courses_lesson_cta_register" }, "Sign up"))));
            }
        });
        return SignUpCtaComponent;
    }(React.Component)));
    exports.FirstCustomCoursePanelComponent = (0, mobx_react_1.observer)((function (_super) {
        __extends(FirstCustomCoursePanelComponent, _super);
        function FirstCustomCoursePanelComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(FirstCustomCoursePanelComponent.prototype, "render", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var store = this.props.store;
                return (React.createElement("div", null,
                    React.createElement("form", { className: "saveFirstCourse", onSubmit: function (e) { return store.createCourseWithCurrentLesson(e); } },
                        React.createElement("p", null, "Create a new Custom Course to save this lesson to:"),
                        React.createElement("p", null,
                            React.createElement("input", { type: "text", className: "form-control", placeholder: "Course Name", "test-id": "add-to-cust-course__name", value: store.newCourseTitle, onChange: function (e) { return store.setNewCourseTitle(e.target.value); } })),
                        store.saveCourseErrorMessage !== "" && React.createElement("p", { className: "danger danger-react" }, store.saveCourseErrorMessage),
                        React.createElement("p", null,
                            React.createElement("button", { type: "submit", disabled: store.isSavingCourse, className: "btn btn-default", "data-cname": "cust_courses_lesson_save_first_course", "test-id": "add-to-cust-course__submit" }, "Save Lesson")),
                        React.createElement("p", { className: "text-muted" }, "Ex. My Awesome Course, Chemistry Prep Course, etc."))));
            }
        });
        return FirstCustomCoursePanelComponent;
    }(React.Component)));
    exports.AvailableCustomCoursesPanelComponent = (0, mobx_react_1.observer)((function (_super) {
        __extends(AvailableCustomCoursesPanelComponent, _super);
        function AvailableCustomCoursesPanelComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(AvailableCustomCoursesPanelComponent.prototype, "render", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var store = this.props.store;
                return (React.createElement(React.Fragment, null,
                    React.createElement("div", { className: "course-list" }, store.courseList.map(function (course) {
                        var _a;
                        return (React.createElement("div", { className: "customCourse course-list__item", key: (_a = course.academyAssetId) !== null && _a !== void 0 ? _a : course.title },
                            (!store.isCurrentLessonInCourse(course) && store.isUnderLessonLimit(course)) && (React.createElement("div", { className: "course-list__item__active" },
                                React.createElement("a", { onClick: function () { return store.displayTopicOptionsOrAddCurrentLessonToOnlyTopic(course); }, className: "course-list__item__active__title skiptranslate", "data-cname": "cust_courses_lesson_choose_course", "test-id": "cust_courses_lesson_choose_course" }, course.title))),
                            store.isCurrentLessonInCourse(course) && (React.createElement("div", { className: "course-list__item__disabled", "data-cname": "cust_courses_lesson_choose_course_already_has_lesson", "test-id": "cust_courses_lesson_choose_course_already_has_lesson" },
                                React.createElement(react_1.default, { content: "The lesson is already part of this custom course!", placement: "top", duration: 0 },
                                    React.createElement("div", { className: "course-list__item__disabled__title skiptranslate", "test-id": "cust_courses_lesson_choose_course_already_has_lesson__title" }, course.title)))),
                            (!store.isCurrentLessonInCourse(course) && !store.isUnderLessonLimit(course)) && (React.createElement("div", { className: "course-list__item__disabled", "data-cname": "cust_courses_lesson_choose_course_full", "test-id": "cust_courses_lesson_choose_course_full" },
                                React.createElement(react_1.default, { content: "You can only have ".concat(store.customCourseLessonLimit, " lessons in a custom course at a time. If you would like to add this resource, please visit your dashboard and delete the lessons you no longer need."), placement: "top", duration: 0 },
                                    React.createElement("div", { className: "course-list__item__disabled__title skiptranslate" }, course.title))))));
                    })),
                    React.createElement(exports.NewCustomCourseInputComponent, { store: store })));
            }
        });
        return AvailableCustomCoursesPanelComponent;
    }(React.Component)));
    exports.NewCustomCourseInputComponent = (0, mobx_react_1.observer)((function (_super) {
        __extends(NewCustomCourseInputComponent, _super);
        function NewCustomCourseInputComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(NewCustomCourseInputComponent.prototype, "render", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var store = this.props.store;
                return (React.createElement(React.Fragment, null,
                    store.isUnderCourseLimit && (React.createElement("form", { className: "saveAnotherCourse", onSubmit: function (e) { return store.createCourseWithCurrentLesson(e); } },
                        React.createElement("div", { className: "input-group" },
                            React.createElement("input", { type: "text", className: "form-control", placeholder: "New Course", onChange: function (e) { return store.setNewCourseTitle(e.target.value); }, "test-id": "add-to-cust-course__name" }),
                            React.createElement("span", { className: "input-group-btn" },
                                React.createElement("button", { type: "submit", disabled: store.isSavingCourse, className: "btn btn-default", "data-cname": "cust_courses_lesson_save_new_course", "test-id": "add-to-cust-course__submit" }, "Save"))),
                        store.saveCourseErrorMessage !== "" && React.createElement("p", { className: "danger danger-react" }, store.saveCourseErrorMessage))),
                    !store.isUnderCourseLimit && (React.createElement("div", { className: "overCourseLimit", "data-cname": "cust_courses_lesson_course_limit_reached", "test-id": "cust_courses_lesson_course_limit_reached" },
                        "You've reached your ",
                        store.getCourseLimit(),
                        " course limit! Select one above to save your lesson."))));
            }
        });
        return NewCustomCourseInputComponent;
    }(React.Component)));
    exports.AvailableCustomTopicsPanelComponent = (0, mobx_react_1.observer)((function (_super) {
        __extends(AvailableCustomTopicsPanelComponent, _super);
        function AvailableCustomTopicsPanelComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(AvailableCustomTopicsPanelComponent.prototype, "render", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var store = this.props.store;
                return (React.createElement("div", null,
                    React.createElement("p", { className: "cc-breadcrumb" },
                        React.createElement("a", { onClick: function () { return store.setSelectedCourse(null); }, "data-cname": "cust_courses_lesson_menu_back_to_courses", "test-id": "cust_courses_lesson_menu_back_to_courses" },
                            React.createElement("span", { className: "icon-arrow-left" }),
                            "\u00A0Back to Courses")),
                    React.createElement("p", null, "Choose a chapter to add this lesson to:"),
                    React.createElement("div", { className: "topic-list" }, store.selectedCourse.topics.map(function (topic) {
                        var _a;
                        return (React.createElement("div", { className: "topic-list__item", key: (_a = topic.academyAssetId) !== null && _a !== void 0 ? _a : topic.title },
                            React.createElement("div", { className: "topic-list__item__active" },
                                React.createElement("a", { onClick: function () { return store.addCurrentLessonToTopic(store.selectedCourse, topic); }, className: "topic-list__item__active__title skiptranslate", "data-cname": "cust_courses_lesson_choose_topic", "test-id": "cust_courses_lesson_choose_topic" }, topic.title))));
                    }))));
            }
        });
        return AvailableCustomTopicsPanelComponent;
    }(React.Component)));
    exports.SuccessfulSavePanelComponent = (0, mobx_react_1.observer)((function (_super) {
        __extends(SuccessfulSavePanelComponent, _super);
        function SuccessfulSavePanelComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(SuccessfulSavePanelComponent.prototype, "render", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _a;
                var store = this.props.store;
                return (React.createElement("div", { className: "saveSuccess", "test-id": "cust-course-create-success" },
                    React.createElement("p", { className: "success" },
                        React.createElement("span", { className: "icon-ok" }),
                        "\u00A0Success!"),
                    React.createElement("p", null,
                        "Lesson saved to:",
                        React.createElement("br", null),
                        React.createElement("a", { className: "skiptranslate", href: (_a = store.lastSavedLessonCourse) === null || _a === void 0 ? void 0 : _a.uri, "data-cname": "cust_courses_lesson_go_to_saved_course", "test-id": "cust_courses_lesson_go_to_saved_course" },
                            React.createElement("span", null, store.getLastSavedLessonDestinationString())))));
            }
        });
        return SuccessfulSavePanelComponent;
    }(React.Component)));
});

//# sourceMappingURL=CustomCourseModuleView.js.map
